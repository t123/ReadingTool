@using ReadingTool.Core
@model ReadingTool.Site.Models.User.ReadViewModel
@{
    ViewBag.Title = "Read";
    string[] scripts = new[]
        {
            @"<script src=""" + Url.Content("~/Scripts/reading/audio.js") + @""" type=""text/javascript""></script>", 
            @"<script src=""" + Url.Content("~/Scripts/reading/settings.js") + @""" type=""text/javascript""></script>", 
            @"<script src=""" + Url.Content("~/Scripts/reading/modal.js") + @""" type=""text/javascript""></script>", 
            @"<script src=""" + Url.Content("~/Scripts/reading/readingui.js") + @""" type=""text/javascript""></script>", 
        };

    if(!Html.IsDebug())
    {
        scripts = scripts.Select(x => x.Replace(".js", ".min.js")).ToArray();
    }

    Bundles.Reference("Scripts/other/head/handlebars/handlebars-1.0.rc.1.js");
    Bundles.Reference("Scripts/other/footer/reading/reading.css");
    Bundles.AddInlineScript(@<text><script src="/routes/?c=user.reading" type="text/javascript"></script></text>, "head");

    Bundles.AddInlineScript(
        @<text>
             <script type="text/javascript">
                 var ui;
                 $(function() {
                     var settings = new Settings();
                     settings.classes.knownClass = '@Constants.TermStates.KNOWN';
                     settings.classes.unknownClass = '@Constants.TermStates.UNKNOWN';
                     settings.classes.ignoredClass = '@Constants.TermStates.IGNORED';
                     settings.classes.notseenClass = '@Constants.TermStates.NOTSEEN';
                     settings.classes.spaceClass = '@Constants.TermStates.SPACE';
                     settings.classes.punctuationClass = '@Constants.TermStates.PUNCTUATION';
                     settings.classes.multiClass = 'mxx';

                     settings.keyBindings.controlsEnabled = @Model.User.KeyBindings.IsEnabled.ToString().ToLowerInvariant();
                     settings.keyBindings.autoPause = @Model.User.KeyBindings.AutoPause.ToString().ToLowerInvariant();
                     
                     settings.keyBindings.resetWord = @(Model.User.KeyBindings.Reset.KeyCode ?? -1);
                     settings.keyBindings.changeKnown = @(Model.User.KeyBindings.Known.KeyCode ?? -1);
                     settings.keyBindings.changeNotKnown = @(Model.User.KeyBindings.NotKnown.KeyCode ?? -1);
                     settings.keyBindings.changeIgnored = @(Model.User.KeyBindings.Ignored.KeyCode ?? -1);
                     settings.keyBindings.changeNotSeen = @(Model.User.KeyBindings.NotSeen.KeyCode ?? -1);
                     
                     settings.keyBindings.volumeUp = @(Model.User.KeyBindings.VolumeUp.KeyCode ?? -1);
                     settings.keyBindings.volumeDown = @(Model.User.KeyBindings.VolumeDown.KeyCode ?? -1);
                     settings.keyBindings.speedUp = @(Model.User.KeyBindings.SpeedUp.KeyCode ?? -1);
                     settings.keyBindings.slowDown = @(Model.User.KeyBindings.SpeedDown.KeyCode ?? -1);
                     
                     settings.keyBindings.secondsToRewind = @(Model.User.KeyBindings.SecondsToRewind);
                     settings.keyBindings.rewindToBeginning = @(Model.User.KeyBindings.RewindToBeginning.KeyCode ?? -1);
                     settings.keyBindings.rewind = @(Model.User.KeyBindings.Rewind.KeyCode ?? -1);
                     settings.keyBindings.playPause = @(Model.User.KeyBindings.PlayPause.KeyCode ?? -1);
                     settings.keyBindings.forward = @(Model.User.KeyBindings.FastForward.KeyCode ?? -1);
                     settings.keyBindings.stop = @(Model.User.KeyBindings.Stop.KeyCode ?? -1);

                     settings.hasAudio = @(!string.IsNullOrEmpty(Model.Text.AudioUrl) ? "true" : "false");
                     settings.audioUrl = '@Model.Text.AudioUrl';
                     settings.textId = '@Model.Text.Id';
                     settings.languageId = '@Model.Language.Id';
                     settings.modalBehaviour = '@Model.Language.Settings.ModalBehaviour';
                     settings.asParallel = @Model.AsParallel.ToString().ToLowerInvariant();
                     ui = new ReadingToolUi(settings);
                 });
             </script>
             @Html.Raw(string.Join("\n", scripts))
         </text>
, "body");
}

@Html.Partial("Partials/_textarea", Model, ViewData)
@Html.Partial("Partials/_textmodal", Model, ViewData)
@Html.Partial("Partials/_templates", Model, ViewData)