@using ReadingTool.Entities.Search
@model ReadingTool.Entities.Search.SearchGridResult<ReadingTool.Site.Models.User.TextListModel> 
@{
    WebGrid grid = new WebGrid(Model.Items, rowsPerPage: @Model.RowsPerPage);
}

@grid.GetHtml(
    tableStyle: "table table-striped table-bordered table-condensed table-hover gridtable",
    numericLinksCount: 0,
    mode: WebGridPagerModes.Numeric,
    footerStyle: "hidden",
    
    columns: new[] {
        grid.Column("", style:"col5", format: @<text><input type="checkbox" value="@item.Id"/></text>, header: "<input type=\"checkbox\" />"),
        grid.Column("Language", style:"col10", format: @<text>
                                             @ViewHelpers.FormatLanguage(@item.Language, @item.LanguageColour)
                                         </text>),
        grid.Column("Title", style:"col30", format: @<text>
                                          @if(!string.IsNullOrEmpty(item.Tags))
                                            {
                                                <i class="icon-tags" title="@item.Tags"> </i>
                                            }

                                          @if(item.HasAudio)
                                          {
                                              <i class="icon-music" title="has audio"> </i>
                                          }
                                            
                                          @item.Title
                                      </text>),
        grid.Column("CollectionName", style:"col25", header: "Collection Name"),
        grid.Column("CollectionNo", style:"col5", header: "Collection No", canSort:false),
        grid.Column("LastSeen", style:"col10", header: "Last Seen", format:@<text>
                                            @Html.FormatDateHumanAgo((DateTime?)@item.LastSeen, "ago")
                                        </text>),
        @*grid.Column("", 
                        style: "button", 
                        header: "", 
                    format: @<text>
                              @if(@item.IsParallel)
                              {
                                  <div class="btn-group">
                                    <a href="@Url.Action("Read", new { id = item.Id })" title="read" class="btn btn-mini">read</a>
                                    <a href="@Url.Action("ReadInParallel", new { id = item.Id })" title="read in parallel" class="btn btn-mini">parallel</a>
                                  </div>
                              }
                              else
                              {
                                  <a href="@Url.Action("Read", new { id = item.Id })" title="read" class="btn btn-mini">read</a>
                              }
                             </text>),

        grid.Column("", style: "button", header: "", format: @<text>@Html.EditButton(Url.Action("Edit", new { id = item.Id }))</text>),
        grid.Column("", style: "button", header: "", format: @<text>@Html.DeleteButton(Url.Action("Delete", new { id = item.Id }))</text>)*@

        grid.Column("", style: "col10", header: "", format: @<text>
<a href="@Url.Action("Read", new { id = item.Id })"><i class="icon-zoom-in" title="read"> </i></a>
@if(item.IsParallel)
{
    <a href="@Url.Action("ReadInParallel", new {id = item.Id})"><i class="icon-pause" title="read parallel"> </i></a>
}
else
{
    <i class="" title=""> </i>
}
<a href="@Url.Action("Edit", new { id = item.Id })"><i class="icon-edit" title="edit"> </i></a>
<form method="POST" action="@Url.Action("Delete", new { id=item.Id})" style="display: inline" onsubmit="return confirm('Are you sure you want to delete this?');">
    @Html.AntiForgeryToken()
    <button type="submit" class="btn-link"><i class="icon-trash"  title="delete"> </i></button>
</form>
                                                                 
                                                             </text>)
    }
    )

@Html.Partial("Partials/_pager", new SearchGridResult<int>
    {
        Direction = Model.Direction,
        Items = null,
        Page = Model.Page,
        RowsPerPage = Model.RowsPerPage,
        Sort = Model.Sort,
        TotalRows = Model.TotalRows
})