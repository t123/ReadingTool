@using ReadingTool.Core.FilterParser
@{
    ViewBag.Title = "Index";

    Bundles.AddInlineScript(
    @<text>
         <script language="javascript">
             var state;
             
             $(document).ready(function () {
                 var jsonState = localStorage["text_filter"];

                 if (jsonState == null || jsonState == undefined) {
                     state = newState();
                 } else {
                     state = JSON.parse(jsonState);
                 }
                
                 $('#searchhelp').popover({html:true});

                 updateGrid();
             });

             function newState() {
                 return {
                     sort: 'language',
                     sortDir: 0,
                     page: 1,
                     filter: '',
                     perPage: 15
                 };
             }
             
             function reset(everything) {
                 $('#filter').val('');
                 
                 if(everything) {
                     state = newState();
                 }
                 
                 updateGrid();
                 return false;
             }
             
             function updateGrid() {
                 localStorage["text_filter"] = JSON.stringify(state);
                 
                 $.post(
                     '@Url.Action("IndexGrid")', {
                         page: state.page,
                         sort: state.sort,
                         sortDir: state.sortDir,
                         filter: state.filter,
                         perPage: state.perPage
                     },
                     function (data) {
                         $('#grid').html(data);
                     }
                 );
             }

             
             $("#filter").bind("keyup", function (e) {
                 if (
                     e.keyCode == 16 ||
                         e.keyCode == 17 ||
                         e.keyCode == 18 ||
                         e.keyCode == 32
                 ) return;
                 if (e.keyCode == 27) {
                     $('#filter').val('');
                     return;
                 }
                 if (e.keyCode == 13) {
                     state.page = 1;
                     updateGrid();
                     return;
                 }

                 delay(function () {
                     state.filter = $('#filter').val();
                     state.page = 1;
                     updateGrid();
                 }, 500);
             });
             
             $('#grid').on("click", "li", function (e) {
                 e.preventDefault();
                 state.page = $(e.target).data('page');
                 updateGrid();
             });
             
             $('#grid').on("click", "thead", function (e) {
                 e.preventDefault();
                 var url = $(e.target).attr('href');
                 var parsed = parseQueryString(url.substring(url.indexOf('?') + 1));

                 if(state.sort==parsed.sort) {
                     state.sortDir = state.sortDir == 0 ? 1 : 0;
                 } else {
                     state.sort = parsed.sort;
                     state.sortDir = 0;
                 }
                 
                 updateGrid();
             });
             
             var parseQueryString = function (queryString) {
                 var params = {}, queries, temp, i, l;
                 queries = queryString.split("&");
                 for (i = 0, l = queries.length; i < l; i++) {
                     temp = queries[i].split('=');
                     params[temp[0]] = temp[1];
                 }
                 return params;
             };
             
             var delay = (function () {
                 var timer = 0;
                 return function (callback, ms) {
                     clearTimeout(timer);
                     timer = setTimeout(callback, ms);
                 };
             })();
         </script>
    </text>, "body");
}

@{
    var text  = @"Just type to start filtering by language, title and collection name. You can search for your own tags by 
using a # sign, or use some of these special tags: " + string.Join(", ", FilterParser.MagicTextTags.Select(x => "<strong>#" + x + "</strong>"));
}
<div class="filterbar">
    <input type="text" name="filter" id="filter" class="input-xxlarge" placeholder="type to search, use # to search for tags">
    <a href="#" onclick="reset(false)">
        <i class=" icon-remove" title="clear text filter"> </i>
    </a>
    
    <a href="#" onclick="reset(true)">
        <i class=" icon-refresh" title="clear the text filter, sort by and sort direction filter"> </i>
    </a>
    
    <a id="searchhelp" href="#" rel="popover" data-content="@text" data-title="Filtering Help">
        <i class=" icon-question-sign" title=""> </i>
    </a>
</div>
<div id="grid"></div>
@section Menu
{
    @Html.Partial("Partials/_menu", null, ViewData)
}

@Html.ActionLink("add a new text", "Add", new { }, new { @class = "btn btn-primary" })
<div class="clr50"></div>