@using ReadingTool.Core.Enums
@using ReadingTool.Core.Formatters;
@using ReadingTool.Entities
@model IEnumerable<ReadingTool.Entities.Language>
@{
    ViewBag.Title = "Index";
    var textStats = ViewBag.TextStats as List<TextStatResult>;
    var termStats = ViewBag.TermStats as List<TermStatResult>;
}

@section Menu
{
    @Html.Partial("Partials/_menu", null, ViewData)
}

@if(Model.Any())
{
    <table class="table table-striped table-bordered table-condensed table-hover">
        <caption>A list of your languages</caption>
        <thead>
            <tr>
                <th>Name</th>
                <th>Texts</th>
                <th>Words Read</th>
                <th>Amount Listened</th>
                <th>Terms</th>
                <th>Breakdown</th>
                <th class="button">&nbsp;</th>
                <th class="button">&nbsp;</th>
                <th class="button">&nbsp;</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var l in Model.OrderBy(x => x.Name, StringComparer.InvariantCultureIgnoreCase))
            {
                var textStat = textStats.FirstOrDefault(x => x.Id == l.Id) ?? new TextStatResult();
                <tr>
                    <td>@ViewHelpers.FormatLanguage(l)</td>
                    <td>@textStat.Count</td>
                    <td>@textStat.Read</td>
                    <td>@(textStat.Listened.SecondsToHourMinuteSeconds())</td>
                    @{
                        var total = termStats.Where(x => x.Id == l.Id).Sum(x=>x.Count);
                        var known = termStats.Where(x => x.Id == l.Id && x.State == TermState.Known.ToString()).Sum(x => x.Count);
                        var notseen = termStats.Where(x => x.Id == l.Id && x.State == TermState.NotSeen.ToString()).Sum(x => x.Count);
                        var unknown = termStats.Where(x => x.Id == l.Id && x.State == TermState.Unknown.ToString()).Sum(x => x.Count);
                        var ignored = termStats.Where(x => x.Id == l.Id && x.State == TermState.Ignored.ToString()).Sum(x => x.Count);

                        var kp = total > 0 ? Math.Floor((double)known / total * 100f) : 0;
                        var np = total > 0 ? Math.Floor((double)notseen / total * 100f) : 0;
                        var up = total > 0 ? Math.Floor((double)unknown / total * 100f) : 0;
                        var ip = total > 0 ? Math.Floor((double)ignored / total * 100f) : 0;
                        kp += (100 - kp - np - up - ip);
                    }
                    <td>@total</td>
                    <td>    
                        @if(total==0)
                        {
                            <text>No progress yet</text>
                        }
                        else
                        {
                            <div class="progress">
                                <div class="bar bar-success" style="width: @kp%" title="known (@known/@kp%)"></div>
                                <div class="bar bar-danger" style="width: @up%" title="unknown (@unknown/@up%)"></div>
                                <div class="bar bar-info" style="width: @np%" title="not seen (@notseen/@np%)"></div>
                                <div class="bar bar-warning" style="width: @ip%" title="ignored (@ignored/@ip%)"></div>
                            </div>
                        }
                    </td>
                    <td>@Html.EditButton(Url.Action("Edit", new { id = l.Id }))</td>
                    <td>@Html.GenericButton("Dictionaries", Url.Action("Dictionaries", new { id = l.Id }), "btn btn-mini")</td>
                    <td>@Html.DeleteButton(Url.Action("Delete", new { id = l.Id }))</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    @Html.FlashMessage("You have not added any languages yet")
}

@Html.ActionLink("add a new language", "Add", new { }, new { @class = "btn btn-primary" })