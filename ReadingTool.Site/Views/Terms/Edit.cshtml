@using ReadingTool.Common
@using ReadingTool.Common.Extensions
@model ReadingTool.Site.Models.Terms.TermModel
@{
    ViewBag.Title = "Edit Term";
    var states = from TermState t in Enum.GetValues(typeof(TermState)) select new { Key = t, Value = t.ToDescription() };
}

<div class="row-fluid">
    <div class="span12">
        @using(Html.BeginForm("Edit", "Terms", new { id = Model.TermId }, FormMethod.Post, new { @class = "form-horizontal" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(x => x.TermId)
            <fieldset>
                <legend>Edit Term</legend>
                <div class="control-group">
                    @Html.LabelFor(x => x.Sentence, new { @class = "control-label" })
                    <div class="controls">
                        @Html.TextBoxFor(x => x.Sentence, new { @placeholder = "the sentence", @class = "input-xxlarge" })
                        @Html.TipFor(x => x.Sentence)
                        @Html.ValidationMessageFor(x => x.Sentence)
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.BasePhrase, new { @class = "control-label" })
                    <div class="controls">
                        @Html.TextBoxFor(x => x.BasePhrase, new { @placeholder = "the base phrase, eg: nominative, dictionary form", @class = "input-xxlarge" })
                        @Html.TipFor(x => x.BasePhrase)
                        @Html.ValidationMessageFor(x => x.BasePhrase)
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.Definition, new { @class = "control-label" })
                    <div class="controls">
                        @Html.TextAreaFor(x => x.Definition, new { @placeholder = "your definition for this term", @class = "input-xxlarge", rows = 3 })
                        @Html.TipFor(x => x.Definition)
                        @Html.ValidationMessageFor(x => x.Definition)
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.Tags, new { @class = "control-label" })
                    <div class="controls">
                        @Html.TextBoxFor(x => x.Tags, new { @placeholder = "any tags for this term, space separated", @class = "input-xxlarge" })
                        @Html.TipFor(x => x.Tags)
                        @Html.ValidationMessageFor(x => x.Tags)
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.State, new { @class = "control-label" })
                    <div class="controls">
                        @Html.DropDownListFor(x => x.State, new SelectList(states, "Key", "Value"), "Please choose new state", new { @class = "input-xxlarge" })
                        @Html.TipFor(x => x.State)
                        @Html.ValidationMessageFor(x => x.State)
                    </div>
                </div>

                <div class="form-actions">
                    <button type="submit" class="btn btn-primary">Save</button>
                    <a href="@Url.Action("Index")" class="btn">Back to terms</a>
                </div>
            </fieldset>
        }
    </div>
</div>
