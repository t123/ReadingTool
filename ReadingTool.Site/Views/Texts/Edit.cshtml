@using ReadingTool.Common
@model ReadingTool.Site.Models.Texts.TextModel
@{
    ViewBag.Title = "Edit Text";
    Bundles.Reference("/Content/CodeMirror");
    Bundles.Reference("/Scripts/CodeMirror");
    
    Bundles.AddInlineScript(@<text><script language="javascript">
                                       function checkL2() {
                                           if ($('#Language2Id').val() == '') {
                                               $('#l2textcontrol').hide();
                                           } else {
                                               $('#l2textcontrol').show();
                                           }
                                       }
                                       $('#Language2Id').change(function () {
                                           checkL2();
                                       });

                                       var cm_l1, cm_l2;
                                       $(function() {
                                           checkL2();
                                           
                                           cm_l1 = CodeMirror.fromTextArea(document.getElementById("L1Text"), {
                                               mode: "plain/text",
                                               lineNumbers: true,
                                               lineWrapping: true,
                                           });
                                           
                                           cm_l2 = CodeMirror.fromTextArea(document.getElementById("L2Text"), {
                                               mode: "plain/text",
                                               lineNumbers: true,
                                               lineWrapping: true,
                                           });;
                                       });
                                   </script></text>, "inline");
}

<div class="row-fluid">
    <div class="span1"></div>
    <div class="span10">
        @using(Html.BeginForm("Edit", "Texts", new { id = Model.TextId }, FormMethod.Post, new { @class = "form-horizontal" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(x => x.TextId)
            <fieldset>
                <legend>Edit Text</legend>
                <div class="control-group">
                    @Html.LabelFor(x => x.Title, new { @class = "control-label" } )
                    <div class="controls">
                        @Html.TextBoxFor(x => x.Title, new { @placeholder = "title of your text", @class="input-xxlarge" })
                        @Html.ValidationMessageFor(x => x.Title)
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.CollectionName, new { @class = "control-label" })
                    <div class="controls">
                        @Html.TextBoxFor(x => x.CollectionName, new { @placeholder = "collection name for grouping texts", @class="input-xxlarge" })
                        @Html.ValidationMessageFor(x => x.CollectionName)
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.CollectionNo, new { @class = "control-label" })
                    <div class="controls">
                        @Html.TextBoxFor(x => x.CollectionNo, new { @placeholder = "collection number for ordering texts in a collection", @class="input-xxlarge" })
                        @Html.ValidationMessageFor(x => x.CollectionNo)
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.AudioUrl, new { @class = "control-label" })
                    <div class="controls">
                        @Html.TextBoxFor(x => x.AudioUrl, new { @placeholder = "URL of the audio", @class="input-xxlarge" })
                        @Html.ValidationMessageFor(x => x.AudioUrl)
                    </div>
                </div>

                <div class="control-group">
                    @Html.LabelFor(x => x.Language1Id, new {@class = "control-label"})
                    <div class="controls">
                        @Html.DropDownListFor(x => x.Language1Id, new SelectList(Model.LanguageList, "Key", "Value"))
                        @Html.ValidationMessageFor(x=>x.Language1Id)
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.L1Text, new {@class = "control-label"})
                    <div class="controls">
                        @Html.TextAreaFor(x=>x.L1Text)
                        @Html.ValidationMessageFor(x=>x.L1Text)
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.Language2Id, new {@class = "control-label"})
                    <div class="controls">
                        @Html.DropDownListFor(x => x.Language2Id, new SelectList(Model.LanguageList, "Key", "Value"), "None")
                        @Html.ValidationMessageFor(x=>x.Language2Id)
                    </div>
                </div>
                <div class="control-group" id="l2textcontrol">
                    @Html.LabelFor(x => x.L2Text, new {@class = "control-label"})
                    <div class="controls">
                        @Html.TextAreaFor(x=>x.L2Text)
                        @Html.ValidationMessageFor(x=>x.L2Text)
                    </div>
                </div>

                <div class="form-actions">
                    <button type="submit" class="btn btn-primary">Save</button>
                    <a href="@Url.Action("Read", new { id=Model.TextId})" class="btn">Read</a>
                    @if(Model.Language2Id!=null)
                    {
                        <a href="@Url.Action("ReadParallel", new { id=Model.TextId})" class="btn">Read in parallel</a>
                    }
                </div>
            </fieldset>
        }
    </div>
    <div class="span1"></div>
</div>
