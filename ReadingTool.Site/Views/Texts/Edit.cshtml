@model ReadingTool.Site.Models.Texts.TextModel
@section bottomJS
{
    <script language="javascript" src="~/ScriptsOther/CodeMirror/codemirror.min.js"></script>
}
@{
    ViewBag.Title = "Edit Text";
    Bundles.Reference("/Content/CodeMirror");
    
    Bundles.AddInlineScript(@<text><script language="javascript">
                                       var cm_l1, cm_l2;
                                       $(function() {
                                           cm_l1 = CodeMirror.fromTextArea(document.getElementById("L1Text"), {
                                               mode: "plain/text",
                                               lineNumbers: true,
                                               lineWrapping: false,
                                           });
                                           
                                           cm_l2 = CodeMirror.fromTextArea(document.getElementById("L2Text"), {
                                               mode: "plain/text",
                                               lineNumbers: true,
                                               lineWrapping: false,
                                           });;
                                       });
                                   </script></text>, "inline");
}

<div class="row-fluid">
    <div class="span12">
        @using(Html.BeginForm("Edit", "Texts", new { id = Model.TextId }, FormMethod.Post, new { @class = "form-horizontal" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(x => x.TextId)
            <fieldset>
                <legend>Edit Text</legend>
                <div class="control-group">
                    @Html.LabelFor(x => x.Title, new { @class = "control-label" } )
                    <div class="controls">
                        @Html.TextBoxFor(x => x.Title, new { @placeholder = "title of your text", @class="input-xxlarge" })
                        @Html.TipFor(x => x.Title)
                        @Html.ValidationMessageFor(x => x.Title)
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.CollectionName, new { @class = "control-label" })
                    <div class="controls">
                        @Html.TextBoxFor(x => x.CollectionName, new { @placeholder = "collection name for grouping texts", @class="input-xxlarge" })
                        @Html.TipFor(x => x.CollectionName)
                        @Html.ValidationMessageFor(x => x.CollectionName)
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.CollectionNo, new { @class = "control-label" })
                    <div class="controls">
                        @Html.TextBoxFor(x => x.CollectionNo, new { @placeholder = "collection number for ordering texts in a collection", @class="input-xxlarge" })
                        @Html.TipFor(x => x.CollectionNo)
                        @Html.ValidationMessageFor(x => x.CollectionNo)
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.AudioUrl, new { @class = "control-label" })
                    <div class="controls">
                        @Html.TextBoxFor(x => x.AudioUrl, new { @placeholder = "URL of the audio", @class="input-xxlarge" })
                        @Html.TipFor(x => x.AudioUrl)
                        @Html.ValidationMessageFor(x => x.AudioUrl)
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.ShareAudioUrl, new { @class = "control-label" })
                    <div class="controls">
                        @Html.CheckBoxFor(x => x.ShareAudioUrl)
                        @Html.TipFor(x => x.ShareAudioUrl)
                        @Html.ValidationMessageFor(x => x.ShareAudioUrl)
                    </div>
                </div>
                <div>
                    <div style="width: 48%; display: inline-block">
                        @Html.LabelFor(x => x.Language1Id, new {@class = "control-label", style="padding-right: 20px;"})
                        @Html.DropDownListFor(x => x.Language1Id, new SelectList(Model.LanguageList, "Key", "Value"))
                        @Html.TipFor(x=>x.Language1Id)
                        @Html.ValidationMessageFor(x=>x.Language1Id)
                        <div class="clr5"></div>
                        @Html.TextAreaFor(x=>x.L1Text)
                    </div>
                    <div style="width: 48%; display: inline-block">
                        @Html.LabelFor(x => x.Language2Id, new {@class = "control-label", style="padding-right: 20px;"})
                        @Html.DropDownListFor(x => x.Language2Id, new SelectList(Model.LanguageList, "Key", "Value"), "None")
                        @Html.TipFor(x=>x.Language2Id)
                        @Html.ValidationMessageFor(x=>x.Language2Id)
                        <div class="clr5"></div>
                        @Html.TextAreaFor(x=>x.L2Text)
                    </div>
                </div>

                <div class="form-actions">
                    <button type="submit" class="btn btn-primary" name="button">Save</button>
                    <button type="submit" class="btn btn-primary" name="button" value="read">Save & read</button>
                    
                    @if(Model.Language2Id!=null)
                    {
                        <button type="submit" class="btn btn-primary" name="button" value="readparallel">Save & read in parallel</button>
                    }

                    <a href="@Url.Action("Read", new { id=Model.TextId})" class="btn">Read</a>
                    @if(Model.Language2Id!=null)
                    {
                        <a href="@Url.Action("ReadParallel", new { id=Model.TextId})" class="btn">Read in parallel</a>
                    }
                </div>
            </fieldset>
        }
    </div>
</div>
@if(!string.IsNullOrEmpty(Model.Groups))
{
    <div class="row-fluid">
        <div class="span12">
            <div class="well well-small">
            This text is shared in the followings groups:
                <ul>
                    @Html.Raw(Model.Groups)
                </ul>
            </div>
        </div>
    </div>
}
