function mergedVM(a) { var b = this; b.settings = a; b.items = ko.observableArray([]); b.currentPage = ko.observable(1); b.totalItems = ko.observable(0); b.totalPages = ko.observable(1); b.checkAll = ko.observable(false); b.limits = ko.observableArray([25, 50, 100, 250, 500, 1e3]); b.limit = ko.observable(25); b.states = ko.observableArray(["Known", "Unknown", "Not Seen", "Ignored"]); b.newState = ko.observable(""); b.orderBy = ko.observable("language"); b.orderDirection = ko.observable("asc"); b.collectionNames = ko.observableArray(["(none)"]); b.itemTypes = ko.observableArray(["Texts", "Videos"]); b.selectedItemTypes = ko.observableArray(["Texts", "Videos"]); b.selectedItems = ko.observableArray([]); b.selectedLanguages = ko.observableArray([]); b.selectedCollections = ko.observableArray([]); b.textFilter = ko.observable(""); b.selectedStates = ko.observableArray([]); b.selectedBoxes = ko.observableArray([]); b.tagsToAdd = ko.observable(""); b.tagsToRemove = ko.observable(""); b.newCollectionName = ko.observable(""); b.groupName = ko.observable(""); b.ungroupName = ko.observable(""); b.showAddTagsDD = function () { $("#addTagsDD").toggle() }; b.showRemoveTagsDD = function () { $("#removeTagsDD").toggle() }; b.showChangeCollectionDD = function () { $("#changeCollectionDD").toggle() }; b.showShareDD = function () { $("#shareDD").toggle() }; b.showUnshareDD = function () { $("#unshareDD").toggle() }; b.showDeleteDD = function () { $("#deleteDD").toggle() }; b.showChangeStateDD = function () { $("#changeStateDD").toggle() }; b.init = function () { ko.applyBindings(b) }; b.changeOrder = function (a, c, d) { var e = $(d.currentTarget); $("#headerRow th a").removeClass("sprite-downarrow").addClass("sprite-uparrow"); if (b.orderBy() == a) { if (b.orderDirection() == "asc") { b.orderDirection("desc"); e.removeClass("sprite-uparrow").addClass("sprite-downarrow") } else { b.orderDirection("asc") } } else { b.orderDirection("asc"); b.orderBy(a) } b.changePage(1) }; b.paging = ko.computed(function () { if (b.totalPages() > 12) { var a = b.currentPage() - 6; var c = b.currentPage() + 6; var d = []; if (a < 2) { a = 1 } else { d.push(1) } var e = true; if (c > b.totalPages() - 1) { c = b.totalPages(); e = false } for (var f = a; f <= c; f++) { d.push(f) } if (e) { d.push(b.totalPages()) } return d } return ko.utils.range(1, b.totalPages) }, b); b.changePage = function (a) { b.selectedItems.removeAll(); b.currentPage(a); b.checkAll(false) }; b.selectAll = function () { if (b.checkAll()) { b.selectedItems(b.items().map(function (a) { return a.id })) } else { b.selectedItems.removeAll() } return true }; b.shareWithGroup = function () { $("#shareGroupStatus").show(); $.post(b.settings.url + "/share", { __RequestVerificationToken: b.settings.afToken, items: b.selectedItems(), share: "share", groupName: b.groupName() }, function (a) { $("#shareGroupStatus").hide(); if (a != null && a.result == "OK") { a.updates.forEach(function (a) { var c = ko.utils.arrayFirst(b.items(), function (b) { return b.id == a.Key }); if (c != null) { c.isShared(a.Value.IsShared); c.sharedGroups(a.Value.SharedGroups) } }); $("#shareDD").stop().css("background-color", "white").animate({ backgroundColor: "#E9FFD6" }, 1500); b.groupName("") } else { $("#shareDD").stop().css("background-color", "white").animate({ backgroundColor: "#FFF4F4" }, 1500) } }) }; b.unshareFromGroup = function () { $("#unshareGroupStatus").show(); $.post(b.settings.url + "/share", { __RequestVerificationToken: b.settings.afToken, items: b.selectedItems(), share: "unshare", groupName: b.ungroupName() }, function (a) { $("#unshareGroupStatus").hide(); if (a != null && a.result == "OK") { a.updates.forEach(function (a) { var c = ko.utils.arrayFirst(b.items(), function (b) { return b.id == a.Key }); if (c != null) { c.isShared(a.Value.IsShared); c.sharedGroups(a.Value.SharedGroups) } }); $("#unshareDD").stop().css("background-color", "white").animate({ backgroundColor: "#E9FFD6" }, 1500); b.ungroupName("") } else { $("#unshareDD").stop().css("background-color", "white").animate({ backgroundColor: "#FFF4F4" }, 1500) } }) }; b.addTags = function () { $("#addTagsStatus").show(); $.post(b.settings.url + "/addtags", { __RequestVerificationToken: b.settings.afToken, items: b.selectedItems(), tagsToAdd: b.tagsToAdd() }, function (a) { $("#addTagsStatus").hide(); if (a == "OK") { $("#addTagsDD").stop().css("background-color", "white").animate({ backgroundColor: "#E9FFD6" }, 1500); b.tagsToAdd("") } else { $("#addTagsDD").stop().css("background-color", "white").animate({ backgroundColor: "#FFF4F4" }, 1500) } }) }; b.removeTags = function () { $("#removeTagsStatus").show(); $.post(b.settings.url + "/removetags", { __RequestVerificationToken: b.settings.afToken, items: b.selectedItems(), tagsToRemove: b.tagsToRemove() }, function (a) { $("#removeTagsStatus").hide(); if (a == "OK") { $("#removeTagsDD").stop().css("background-color", "white").animate({ backgroundColor: "#E9FFD6" }, 1500); b.tagsToRemove("") } else { $("#removeTagsDD").stop().css("background-color", "white").animate({ backgroundColor: "#FFF4F4" }, 1500) } }) }; b.changeCollectionName = function () { $("#rchangeCollectionStatus").show(); $.post(b.settings.url + "/changecollectionname", { __RequestVerificationToken: b.settings.afToken, items: b.selectedItems(), newCollectionName: b.newCollectionName() }, function (a) { $("#changeCollectionStatus").hide(); if (a == "OK") { b.selectedItems().forEach(function (a) { var c = ko.utils.arrayFirst(b.items(), function (b) { return b.id == a }); if (c != null) { c.collectionName(b.newCollectionName()) } }); $("#changeCollectionDD").stop().css("background-color", "white").animate({ backgroundColor: "#E9FFD6" }, 1500); b.newCollectionName("") } else { $("#changeCollectionDD").stop().css("background-color", "white").animate({ backgroundColor: "#FFF4F4" }, 1500) } }) }; b.deleteItem = function (a) { if (!confirm("Are you sure you want to delete this?")) return; $.post(b.settings.url + "/delete", { __RequestVerificationToken: b.settings.afToken, items: [a.id] }, function (c) { if (c == "OK") { b.items.remove(function (b) { return b.id == a.id }) } }) }; b.deleteItems = function () { $("#deleteStatus").show(); $.post(b.settings.url + "/delete", { __RequestVerificationToken: b.settings.afToken, items: b.selectedItems() }, function (a) { $("#deleteStatus").hide(); if (a == "OK") { $("#deleteDD").stop().css("background-color", "white").animate({ backgroundColor: "#E9FFD6" }, 1500); b.currentPage(0); b.currentPage(1) } else { $("#deleteDD").stop().css("background-color", "white").animate({ backgroundColor: "#FFF4F4" }, 1500) } }) }; b.changeStatus = function () { $("#changeStateStatus").show(); $.post(b.settings.url + "/changestatus", { __RequestVerificationToken: b.settings.afToken, items: b.selectedItems(), newState: b.newState() }, function (a) { $("#changeStateStatus").hide(); if (a == "OK") { b.selectedItems().forEach(function (a) { var c = ko.utils.arrayFirst(b.items(), function (b) { return b.id == a }); if (c != null) { c.state(b.newState()) } }); $("#changeStateDD").stop().css("background-color", "white").animate({ backgroundColor: "#E9FFD6" }, 1500); b.newState("") } else { $("#changeStateDD").stop().css("background-color", "white").animate({ backgroundColor: "#FFF4F4" }, 1500) } }) }; b.filter = ko.computed(function () { b.selectedItems([]); if (a.index == "words") { $.post(b.settings.url + "/search", { __RequestVerificationToken: b.settings.afToken, filter: b.textFilter(), languages: b.selectedLanguages(), states: b.selectedStates(), boxes: b.selectedBoxes(), orderBy: b.orderBy(), orderDirection: b.orderDirection(), limit: b.limit(), page: b.currentPage() }, function (a) { b.items.removeAll(); a.items.forEach(function (a) { b.items.push(new wordModel(a)) }); b.totalItems(a.totalItems); b.totalPages(a.totalPages) }) } else if (a.index == "items") { b.selectedItems([]); $.post(b.settings.url + "/search", { __RequestVerificationToken: b.settings.afToken, types: b.selectedItemTypes(), filter: b.textFilter(), languages: b.selectedLanguages(), collectionNames: b.selectedCollections(), orderBy: b.orderBy(), orderDirection: b.orderDirection(), limit: b.limit(), page: b.currentPage() }, function (a) { b.items.removeAll(); a.items.forEach(function (a) { b.items.push(new itemModel(a)) }); if (a.collectionNames != null) { b.collectionNames.removeAll(); b.collectionNames.push("(none)"); a.collectionNames.forEach(function (a) { b.collectionNames.push(a) }) } b.totalItems(a.totalItems); b.totalPages(a.totalPages) }) } }, b).extend({ throttle: 10 }); b.init() } function messagesVM(a) { var b = this; b.settings = a; b.items = ko.observableArray([]); b.currentPage = ko.observable(1); b.totalItems = ko.observable(0); b.totalPages = ko.observable(1); b.selectedFolders = ko.observable("inbox"); b.textFilter = ko.observable(""); b.init = function () { ko.applyBindings(b) }; b.paging = ko.computed(function () { if (b.totalPages() > 12) { var a = b.currentPage() - 6; var c = b.currentPage() + 6; var d = []; if (a < 2) { a = 1 } else { d.push(1) } var e = true; if (c > b.totalPages() - 1) { c = b.totalPages(); e = false } for (var f = a; f <= c; f++) { d.push(f) } if (e) { d.push(b.totalPages()) } return d } return ko.utils.range(1, b.totalPages) }, b); b.changePage = function (a) { b.currentPage(a) }; b.filter = ko.computed(function () { var a = "in"; if (b.selectedFolders() == "sent") { a = "out" } $.post(b.settings.url + "/search" + a, { __RequestVerificationToken: b.settings.afToken, filter: b.textFilter(), folders: b.selectedFolders(), page: b.currentPage() }, function (a) { b.items.removeAll(); a.items.forEach(function (a) { b.items.push(new messageModel(a)) }); b.totalItems(a.totalItems); b.totalPages(a.totalPages) }) }, b).extend({ throttle: 10 }); b.star = function (a) { b.changeStar(a.id, true) }; b.unstar = function (a) { b.changeStar(a.id, false) }; b.changeStar = function (a, c) { $.post(b.settings.url + "/star", { __RequestVerificationToken: b.settings.afToken, id: a, status: c }, function (a) { var c = ko.utils.arrayFirst(b.items(), function (b) { return b.id == a.id }); if (c != null) { c.isStarred(a.status) } }) }; b.deleteMessage = function (a) { if (!confirm("Are you sure you want to delete this message?")) { return } $.post(b.settings.url + "/delete", { __RequestVerificationToken: b.settings.afToken, id: a.id }, function (a) { b.items.remove(function (b) { return b.id == a }) }) }; b.init() } function languagesVM(a) { var b = this; b.settings = a; b.items = ko.observableArray([]); b.notSetLanguages = ko.observable(false); b.init = function () { $.post(b.settings.url + "/search", { __RequestVerificationToken: b.settings.afToken }, function (a) { b.items.removeAll(); a.items.forEach(function (a) { b.items.push(new languageModel(a)); if (a.systemName == "Not Yet Set") b.notSetLanguages(true) }) }); ko.applyBindings(b) }; b.deleteLanguage = function (a) { if (!confirm("Are you sure you want to delete this. This will also delete all the texts/videos in this language")) return; $.post(b.settings.url + "/deletelanguage", { id: a.id, __RequestVerificationToken: b.settings.afToken }, function (c) { if (c != null && c == "OK") { b.items.remove(function (b) { return b.id == a.id }) } }) }; b.init() } function groupViewVM(a) { var b = this; b.settings = a; b.items = ko.observableArray([]); b.currentPage = ko.observable(1); b.totalItems = ko.observable(0); b.totalPages = ko.observable(1); b.limits = ko.observableArray([25, 50, 100, 250, 500, 1e3]); b.limit = ko.observable(25); b.selectedFolders = ko.observableArray(["texts"]); b.textFilter = ko.observable(""); b.init = function () { ko.applyBindings(b) }; b.paging = ko.computed(function () { if (b.totalPages() > 12) { var a = b.currentPage() - 6; var c = b.currentPage() + 6; var d = []; if (a < 2) { a = 1 } else { d.push(1) } var e = true; if (c > b.totalPages() - 1) { c = b.totalPages(); e = false } for (var f = a; f <= c; f++) { d.push(f) } if (e) { d.push(b.totalPages()) } return d } return ko.utils.range(1, b.totalPages) }, b); b.changePage = function (a) { b.currentPage(a); b.checkAll(false) }; b.filter = ko.computed(function () { $.post(b.settings.url + "/groupitems", { __RequestVerificationToken: b.settings.afToken, groupId: b.settings.groupId, filter: b.textFilter(), folders: b.selectedFolders(), limit: b.limit(), page: b.currentPage() }, function (a) { b.items.removeAll(); a.items.forEach(function (a) { b.items.push(new groupItemModel(a)) }); b.totalItems(a.totalItems); b.totalPages(a.totalPages) }) }, b).extend({ throttle: 10 }); b.init() } function groupsVM(a) { self.settings = a; self.items = ko.observableArray([]); self.currentPage = ko.observable(1); self.totalItems = ko.observable(0); self.totalPages = ko.observable(1); self.selectedFolders = ko.observableArray([]); self.textFilter = ko.observable(""); self.init = function () { ko.applyBindings(self) }; self.paging = ko.computed(function () { if (self.totalPages() > 12) { var a = self.currentPage() - 6; var b = self.currentPage() + 6; var c = []; if (a < 2) { a = 1 } else { c.push(1) } var d = true; if (b > self.totalPages() - 1) { b = self.totalPages(); d = false } for (var e = a; e <= b; e++) { c.push(e) } if (d) { c.push(self.totalPages()) } return c } return ko.utils.range(1, self.totalPages) }, self); self.changePage = function (a) { self.currentPage(a) }; self.filter = ko.computed(function () { $.post(self.settings.url + "/search", { __RequestVerificationToken: self.settings.afToken, filter: self.textFilter(), folders: self.selectedFolders(), page: self.currentPage() }, function (a) { self.items.removeAll(); a.items.forEach(function (a) { self.items.push(new groupModel(a)) }); self.totalItems(a.totalItems); self.totalPages(a.totalPages) }) }, self).extend({ throttle: 10 }); self.init() } function groupMembershipVM(a) { var b = this; b.settings = a; b.items = ko.observableArray([]); b.currentPage = ko.observable(1); b.totalItems = ko.observable(0); b.totalPages = ko.observable(1); b.selectedFolders = ko.observableArray([]); b.textFilter = ko.observable(""); b.init = function () { ko.applyBindings(b) }; b.paging = ko.computed(function () { if (b.totalPages() > 12) { var a = b.currentPage() - 6; var c = b.currentPage() + 6; var d = []; if (a < 2) { a = 1 } else { d.push(1) } var e = true; if (c > b.totalPages() - 1) { c = b.totalPages(); e = false } for (var f = a; f <= c; f++) { d.push(f) } if (e) { d.push(b.totalPages()) } return d } return ko.utils.range(1, b.totalPages) }, b); b.changePage = function (a) { b.currentPage(a) }; b.filter = ko.computed(function () { $.post(b.settings.url + "/searchmembership", { __RequestVerificationToken: b.settings.afToken, groupId: b.settings.groupId, folders: b.selectedFolders(), page: b.currentPage() }, function (a) { b.items.removeAll(); a.items.forEach(function (a) { b.items.push(new groupMembershipModel(a)) }); b.totalItems(a.totalItems); b.totalPages(a.totalPages) }) }, b).extend({ throttle: 10 }); b.init() } function addTextVM(a) { var b = this; b.settings = a; b.languages = ko.observableArray([]); b.selectedLanguage = ko.observableArray([]); b.init = function () { $.post(b.settings.urls.ajaxUrl + "/languagesfortexts", { __RequestVerificationToken: b.settings.afToken }, function (a) { a.languages.forEach(function (a) { b.languages.push(new textaddLanguageModel(a)) }); b.selectedLanguage.push(b.settings.languageId) }) }; b.canParse = ko.computed(function () { if (b.selectedLanguage() == undefined) return false; var a = ko.utils.arrayFirst(b.languages(), function (a) { return a.id == b.selectedLanguage() }); return a != null && a.code == "jpn" }, b); b.isRtl = ko.computed(function () { if (b.selectedLanguage() == undefined) return "ltr"; var a = ko.utils.arrayFirst(b.languages(), function (a) { return a.id == b.selectedLanguage() }); return a != null && a.isRtl ? "rtl" : "ltr" }); b.init(); ko.applyBindings(b) } function textaddLanguageModel(a) { this.id = a.id; this.isRtl = a.isRtl; this.code = a.code; this.name = a.name } function wordModel(a) { this.id = a.id; this.languageName = a.languageName; this.languageColour = a.languageColour; this.word = a.word; this.state = ko.observable(a.state); this.box = a.box; this.sentence = a.sentence } function tagModel(a) { this.name = a } function collectionNameModel(a) { this.id = a == "" ? "(no collection name)" : a; this.name = a == "" ? "(no collection name)" : a } function languageModel(a) { this.id = a.id; this.name = a.name; this.colour = a.colour; this.systemName = a.systemName } function messageModel(a) { this.id = a.id; this.from = new userSimpleModel(a.from); var b = this; this.to = []; if (a.to != null && a.to != undefined) { a.to.forEach(function (a) { b.to.push(new userSimpleModel(a)) }) } this.isStarred = ko.observable(a.isStarred); this.isRead = a.isRead; this.subject = a.subject; this.date = a.date } function userSimpleModel(a) { if (a == null || a == undefined) return; this.id = a.id; this.username = a.username; this.name = a.name } function groupMembershipModel(a) { this.id = a.id; this.type = a.type; this.user = new userSimpleModel(a.user) } function groupModel(a) { this.id = a.id; this.name = a.name; this.association = a.association; this.canManage = a.canManage; this.canView = a.canView; this.canEdit = a.canEdit; this.canInfo = a.canInfo; this.pending = a.pending == "" ? "" : " (" + a.pending + " requests)" } function itemModel(a) { this.id = a.id; this.language = a.language; this.languageColour = a.languageColour; this.title = a.title; this.collectionName = ko.observable(a.collectionName); this.collectionNo = a.collectionNo; this.lastSeen = a.lastSeen; this.itemType = a.itemType; this.isShared = ko.observable(a.isShared); this.sharedGroups = ko.observable(a.sharedGroups); this.isParallel = a.isParallel; this.hasAudio = a.hasAudio } function groupItemModel(a) { this.id = a.id; this.title = a.title; this.collectionName = a.collectionName; this.collectionNo = a.collectionNo; this.hasAudio = a.hasAudio; this.isParallelText = a.isParallel; this.isText = a.isText; this.language = a.language } function uiHelper(a) { var b = this; b.settings = a; b.settings.autocomplete = a.autocomplete || []; b.settings.tags = a.tags || []; b.split = function (a) { return a.split(/ \s*/) }; b.extractLast = function (a) { return b.split(a).pop() }; $.each(b.settings.autocomplete, function (a, c) { $(c.name).autocomplete({ source: b.settings.urls.ajaxUrl + "/" + c.endpoint, minLength: c.length || 3, select: function (a, b) { if (c.vm != null) { if (c.type == "collection") { c.vm.newCollectionName($(this).val(b.item.value).val()) } else if (c.type == "groupshare") { c.vm.groupName($(this).val(b.item.value).val()) } else if (c.type == "groupunshare") { c.vm.ungroupName($(this).val(b.item.value).val()) } } } }) }); $.each(b.settings.tags, function (a, c) { $(c.name).bind("keydown", function (a) { if (a.keyCode === $.ui.keyCode.TAB && $(this).data("autocomplete").menu.active) { a.preventDefault() } }).autocomplete({ source: function (a, d) { $.post(b.settings.urls.ajaxUrl + "/" + c.endpoint, { term: b.extractLast(a.term) }, d) }, search: function () { var a = b.extractLast(this.value); if (a.length < (c.length || 2)) { return false } }, focus: function () { return false }, select: function (a, d) { var e = b.split(this.value); e.pop(); e.push(d.item.value); e.push(""); this.value = e.join(" "); if (c.vm != null) { if (c.type == "tag") { c.vm.tagsToAdd(this.value) } else if (c.type == "untag") { c.vm.tagsToRemove(this.value) } } return false } }) }); $("#ParallelIsRtl").click(function () { $("#ParallelText").attr("dir", $(this).is(":checked") ? "rtl" : "ltr") }); $("#addPart").click(function () { $.ajax({ url: b.settings.urls.textUrl + "/addtextpart", cache: false, success: function (a) { $("#parts").append(a); $("form").removeData("validator"); $.validator.unobtrusive.parse($("form")) } }); return false }); $(".deletePart").live("click", function () { $("form").removeData("validator"); $(this).parents("div.part:first").remove(); $.validator.unobtrusive.parse($("form")); return false }) } function messageCount(a) { $.post(a, function (a) { if (a == "") { $("#msgCount").hide() } else { $("#msgCount").show().html(a) } }) } $.ajaxSetup({ scriptCharset: "utf-8", contentType: "application/x-www-form-urlencoded; charset=UTF-8" }); $.ajaxSettings.traditional = true; $.ajaxSetup({ type: "post" })