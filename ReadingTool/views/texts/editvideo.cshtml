@using MongoDB.Bson
@model VideoModel
@{
    ViewBag.Title = "Edit Video";
    var nextId = (ObjectId) ViewBag.NextId;
    var previousId = (ObjectId) ViewBag.PreviousId;
    bool tooManyWords = ViewBag.TooManyWords != null && (bool)ViewBag.TooManyWords;
}
@section styles {
    <link href="@AppHelper.CssUrl("site/jquery-ui-1.8.17.custom.css")" rel="stylesheet" type="text/css" media="screen, projection"/>
}
@section submenu { @Html.Partial("_menu") }
@section footer { }

<div style="height:30px">
    <ul class="top">
        <li>
            <a title="edit video" href="@(Html.BuildUrlFromExpression<TextsController>(x => x.EditVideo(Model.ItemId.ToString())))" class="sprite spritesedit-edit">edit</a>
        </li>
        <li>
            <a title="watch video" href="@(Html.BuildUrlFromExpression<TextsController>(x => x.Watch(Model.ItemId.ToString())))" class="sprite spritesedit-watch">watch</a>
        </li>
    
        @if(previousId!=ObjectId.Empty)
        {
            <li>
                <a title="previous video" href="@(Html.BuildUrlFromExpression<TextsController>(x => x.EditVideo(previousId.ToString())))" class="sprite spritesedit-prev">previous</a>
            </li>
        }
        @if(nextId!=ObjectId.Empty)
        {
            <li>
                <a title="next video" href="@(Html.BuildUrlFromExpression<TextsController>(x => x.EditVideo(nextId.ToString())))" class="sprite spritesedit-next">next</a>
            </li>
        }
        <li>
            @{
                using(Html.BeginForm<TextsController>(x => x.DeleteVideo(Model.ItemId.ToString()), FormMethod.Post, new { style = "display:inline;", onsubmit = "return confirm('Are you sure you want to delete this?')" }))
                {
                    @Html.AntiForgeryToken()
                    <input title="delete video" type="submit" value="" class="sprite spritesedit-delete" style="padding:0px 0px 0px 0px; margin: 0px 0px 0px 0px; height:23px;width: 24px;border:none;cursor:pointer"/>
                }
            }
        </li>
    </ul>
</div>
@if(tooManyWords)
{
    <p class="warning">
        An approximation of the number of words in this text shows it <strong>might</strong> contain too many words to read (but it may be fine).
        You can reduce the length of this text or split it into multiple pieces. The current maximum words per text is 
        <strong>@SystemSettings.Instance.Values.Site.MaxWordsParsingException</strong> words.
    </p>
}
@{
    using(Html.BeginForm<TextsController>(x => x.EditVideo(Model.ItemId.ToString()), FormMethod.Post))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(x=>x.ItemId)
        <legend>Edit Video</legend>

        <div class="input_wrapper">
            @Html.LabelHelpFor(x => x.LanguageId)
            @Html.DropDownListFor(
                x => x.LanguageId,
                 new SelectList(ViewBag.Languages as Dictionary<ObjectId, string>, "Key", "Value"),
                "Please choose a language"
           )
            @Html.ValidationMessageFor(x => x.LanguageId)
        </div>
    
        <div class="input_wrapper">
            @Html.LabelHelpFor(x => x.Url)
            @Html.TextBoxFor(x => x.Url)
            @Html.ValidationMessageFor(x => x.Url)
        </div>
    
        <div class="input_wrapper">
            @Html.LabelHelpFor(x => x.CollectionName)
            @Html.TextBoxFor(x => x.CollectionName)
            @Html.ValidationMessageFor(x => x.CollectionName)
        </div>

        <div class="input_wrapper">
            @Html.LabelHelpFor(x => x.CollectionNo)
            @Html.TextBoxFor(x => x.CollectionNo)
            @Html.ValidationMessageFor(x => x.CollectionNo)
        </div>
    
        <div class="input_wrapper">
            @Html.LabelHelpFor(x => x.Title)
            @Html.TextBoxFor(x => x.Title)
            @Html.ValidationMessageFor(x => x.Title)
        </div>
    
        <div class="input_wrapper">
            @Html.LabelHelpFor(x => x.Tags)
            @Html.TextBoxFor(x => x.Tags)
            @Html.ValidationMessageFor(x => x.Tags)
        </div>
    
        <div class="input_wrapper">
            @Html.LabelHelpFor(x => x.L1Text)
            @Html.TextAreaFor(x => x.L1Text)
            @Html.ValidationMessageFor(x => x.L1Text)
        </div>
    
        <div class="input_wrapper">
            @Html.LabelHelpFor(x => x.L2Text)
            @Html.TextAreaFor(x => x.L2Text)
            @Html.ValidationMessageFor(x => x.L2Text)
        </div>
    
        <button type="submit">
            <span>save video</span>
        </button>
    }
}

@section bottomJS {
    <script language="javascript" type="text/javascript">
        new uiHelper({
            urls: { ajaxUrl: '@((ViewData[CacheKeys.URLS] as UrlModel).Ajax)' },
            autocomplete: [{ name: '#CollectionName', endpoint: 'autocompletevideocollectionname'}],
            tags: [{ name: '#Tags', endpoint: 'autocompletevideotags'}]
        });
    </script>
}