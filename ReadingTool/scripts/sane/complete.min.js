(function (a) { function d(a, b, d) { var e = a[0].parentNode, f = e.cycleTimeout; if (f) { clearTimeout(f); e.cycleTimeout = 0 } b.nextSlide = b.currSlide + d; if (b.nextSlide < 0) { b.nextSlide = a.length - 1 } else if (b.nextSlide >= a.length) { b.nextSlide = 0 } c(a, b, 1, d >= 0); return false } function c(b, d, e, f) { function l() { if (d.timeout) g.cycleTimeout = setTimeout(function () { c(b, d, 0, !d.rev) }, d.timeout) } if (d.busy) return; var g = b[0].parentNode, h = b[d.currSlide], i = b[d.nextSlide]; if (g.cycleTimeout === 0 && !e) return; if (e || !g.cyclePause) { if (d.before.length) a.each(d.before, function (a, b) { b.apply(i, [h, i, d, f]) }); var j = function () { if (a.browser.msie) this.style.removeAttribute("filter"); a.each(d.after, function (a, b) { b.apply(i, [h, i, d, f]) }); l() }; if (d.nextSlide != d.currSlide) { d.busy = 1; a.fn.cycle.custom(h, i, d, j) } var k = d.nextSlide + 1 == b.length; d.nextSlide = k ? 0 : d.nextSlide + 1; d.currSlide = k ? b.length - 1 : d.nextSlide - 1 } else { l() } } var b = "Lite-1.5"; a.fn.cycle = function (b) { return this.each(function () { b = b || {}; if (this.cycleTimeout) clearTimeout(this.cycleTimeout); this.cycleTimeout = 0; this.cyclePause = 0; var e = a(this); var f = b.slideExpr ? a(b.slideExpr, this) : e.children(); var g = f.get(); if (g.length < 2) { window.console && console.log("terminating; too few slides: " + g.length); return } var h = a.extend({}, a.fn.cycle.defaults, b || {}, a.metadata ? e.metadata() : a.meta ? e.data() : {}); var i = a.isFunction(e.data) ? e.data(h.metaAttr) : null; if (i) h = a.extend(h, i); h.before = h.before ? [h.before] : []; h.after = h.after ? [h.after] : []; h.after.unshift(function () { h.busy = 0 }); var j = this.className; h.width = parseInt((j.match(/w:(\d+)/) || [])[1]) || h.width; h.height = parseInt((j.match(/h:(\d+)/) || [])[1]) || h.height; h.timeout = parseInt((j.match(/t:(\d+)/) || [])[1]) || h.timeout; if (e.css("position") == "static") e.css("position", "relative"); if (h.width) e.width(h.width); if (h.height && h.height != "auto") e.height(h.height); var k = 0; f.css({ position: "absolute", top: 0 }).each(function (b) { a(this).css("z-index", g.length - b) }); a(g[k]).css("opacity", 1).show(); if (a.browser.msie) g[k].style.removeAttribute("filter"); if (h.fit && h.width) f.width(h.width); if (h.fit && h.height && h.height != "auto") f.height(h.height); if (h.pause) e.hover(function () { this.cyclePause = 1 }, function () { this.cyclePause = 0 }); var l = a.fn.cycle.transitions[h.fx]; l && l(e, f, h); f.each(function () { var b = a(this); this.cycleH = h.fit && h.height ? h.height : b.height(); this.cycleW = h.fit && h.width ? h.width : b.width() }); if (h.cssFirst) a(f[k]).css(h.cssFirst); if (h.timeout) { if (h.speed.constructor == String) h.speed = { slow: 600, fast: 200}[h.speed] || 400; if (!h.sync) h.speed = h.speed / 2; while (h.timeout - h.speed < 250) h.timeout += h.speed } h.speedIn = h.speed; h.speedOut = h.speed; h.slideCount = g.length; h.currSlide = k; h.nextSlide = 1; var m = f[k]; if (h.before.length) h.before[0].apply(m, [m, m, h, true]); if (h.after.length > 1) h.after[1].apply(m, [m, m, h, true]); if (h.click && !h.next) h.next = h.click; if (h.next) a(h.next).unbind("click.cycle").bind("click.cycle", function () { return d(g, h, h.rev ? -1 : 1) }); if (h.prev) a(h.prev).unbind("click.cycle").bind("click.cycle", function () { return d(g, h, h.rev ? 1 : -1) }); if (h.timeout) this.cycleTimeout = setTimeout(function () { c(g, h, 0, !h.rev) }, h.timeout + (h.delay || 0)) }) }; a.fn.cycle.custom = function (b, c, d, e) { var f = a(b), g = a(c); g.css(d.cssBefore); var h = function () { g.animate(d.animIn, d.speedIn, d.easeIn, e) }; f.animate(d.animOut, d.speedOut, d.easeOut, function () { f.css(d.cssAfter); if (!d.sync) h() }); if (d.sync) h() }; a.fn.cycle.transitions = { fade: function (a, b, c) { b.not(":eq(0)").hide(); c.cssBefore = { opacity: 0, display: "block" }; c.cssAfter = { display: "none" }; c.animOut = { opacity: 0 }; c.animIn = { opacity: 1} }, fadeout: function (b, c, d) { d.before.push(function (b, c, d, e) { a(b).css("zIndex", d.slideCount + (e === true ? 1 : 0)); a(c).css("zIndex", d.slideCount + (e === true ? 0 : 1)) }); c.not(":eq(0)").hide(); d.cssBefore = { opacity: 1, display: "block", zIndex: 1 }; d.cssAfter = { display: "none", zIndex: 0 }; d.animOut = { opacity: 0} } }; a.fn.cycle.ver = function () { return b }; a.fn.cycle.defaults = { animIn: {}, animOut: {}, fx: "fade", after: null, before: null, cssBefore: {}, cssAfter: {}, delay: 0, fit: 0, height: "auto", metaAttr: "cycle", next: null, pause: 0, prev: null, speed: 1e3, slideExpr: null, sync: 1, timeout: 4e3} })(jQuery)
$.fn.flashMessage = function (a) { function d(a) { $.cookie("Flash." + a, null, { path: "/" }) } function c() { $.each(new Array("Success", "Error", "Warning", "Info"), function (b, c) { var e = $.cookie("Flash." + c); if (e) { a.message = e; a.alert = c; d(c); return } }) } var b = this; a = $.extend({}, a, { timeout: 0, alert: "info" }); if (!a.message) { c(a) } if (a.message) { $(b).addClass("alert-" + a.alert.toString().toLowerCase()); if (typeof a.message === "string") { $("p", b).html("<span>" + a.message + "</span>") } else { b.empty().append(a.message) } } else { return } if (b.children().length === 0) return; b.fadeIn().one("click", function () { $(this).fadeOut() }); if (a.timeout > 0) { setTimeout(function () { b.fadeOut() }, a.timeout) } return this }
jQuery.cookie = function (a, b, c) { if (arguments.length > 1 && String(b) !== "[object Object]") { c = jQuery.extend({}, c); if (b === null || b === undefined) { c.expires = -1 } if (typeof c.expires === "number") { var d = c.expires, e = c.expires = new Date; e.setDate(e.getDate() + d) } b = String(b); return document.cookie = [encodeURIComponent(a), "=", c.raw ? b : encodeURIComponent(b), c.expires ? "; expires=" + c.expires.toUTCString() : "", c.path ? "; path=" + c.path : "", c.domain ? "; domain=" + c.domain : "", c.secure ? "; secure" : ""].join("") } c = b || {}; var f, g = c.raw ? function (a) { return a } : decodeURIComponent; return (f = (new RegExp("(?:^|; )" + encodeURIComponent(a) + "=([^;]*)")).exec(document.cookie)) ? g(f[1]) : null }
$(function () { $("a.help").hover(function () { clearTimeout($(this).data("timeout")); $(this).parents("form").children("div.input_wrapper").find("div.formhelp").hide(); $(this).parent().find("div.formhelp").show() }, function () { var a = $(this); var b = setTimeout(function () { a.parent().find("div.formhelp").fadeOut("slow") }, 500); a.data("timeout", b) }) })
function messageCount(e) { $.post(e, function (e) { if (e == "") { $("#msgCount").hide() } else { $("#msgCount").show().html(e) } }) } function uiHelper(e) { var t = this; t.settings = e; t.settings.autocomplete = e.autocomplete || []; t.settings.tags = e.tags || []; t.split = function (e) { return e.split(/ \s*/) }; t.extractLast = function (e) { return t.split(e).pop() }; $.each(t.settings.autocomplete, function (e, n) { $(n.name).autocomplete({ source: t.settings.urls.ajaxUrl + "/" + n.endpoint, minLength: n.length || 3, select: function (e, t) { if (n.vm != null) { if (n.type == "collection") { n.vm.newCollectionName($(this).val(t.item.value).val()) } else if (n.type == "groupshare") { n.vm.groupName($(this).val(t.item.value).val()) } else if (n.type == "groupunshare") { n.vm.ungroupName($(this).val(t.item.value).val()) } } } }) }); $.each(t.settings.tags, function (e, n) { $(n.name).bind("keydown", function (e) { if (e.keyCode === $.ui.keyCode.TAB && $(this).data("autocomplete").menu.active) { e.preventDefault() } }).autocomplete({ source: function (e, r) { $.post(t.settings.urls.ajaxUrl + "/" + n.endpoint, { term: t.extractLast(e.term) }, r) }, search: function () { var e = t.extractLast(this.value); if (e.length < (n.length || 2)) { return false } }, focus: function () { return false }, select: function (e, r) { var i = t.split(this.value); i.pop(); i.push(r.item.value); i.push(""); this.value = i.join(" "); if (n.vm != null) { if (n.type == "tag") { n.vm.tagsToAdd(this.value) } else if (n.type == "untag") { n.vm.tagsToRemove(this.value) } } return false } }) }); $("#ParallelIsRtl").click(function () { $("#ParallelText").attr("dir", $(this).is(":checked") ? "rtl" : "ltr") }); $("#addPart").click(function () { $.ajax({ url: t.settings.urls.textUrl + "/addtextpart", cache: false, success: function (e) { $("#parts").append(e); $("form").removeData("validator"); $.validator.unobtrusive.parse($("form")) } }); return false }); $(".deletePart").live("click", function () { $("form").removeData("validator"); $(this).parents("div.part:first").remove(); $.validator.unobtrusive.parse($("form")); return false }) } function groupItemModel(e) { this.id = e.id; this.title = e.title; this.collectionName = e.collectionName; this.collectionNo = e.collectionNo; this.hasAudio = e.hasAudio; this.isParallelText = e.isParallel; this.isText = e.isText; this.language = e.language } function itemModel(e) { this.id = e.id; this.language = e.language; this.languageColour = e.languageColour; this.title = e.title; this.collectionName = ko.observable(e.collectionName); this.collectionNo = e.collectionNo; this.lastSeen = e.lastSeen; this.itemType = e.itemType; this.isShared = ko.observable(e.isShared); this.sharedGroups = ko.observable(e.sharedGroups); this.isParallel = e.isParallel; this.hasAudio = e.hasAudio } function groupModel(e) { this.id = e.id; this.name = e.name; this.association = e.association; this.canManage = e.canManage; this.canView = e.canView; this.canEdit = e.canEdit; this.canInfo = e.canInfo; this.pending = e.pending == "" ? "" : " (" + e.pending + " requests)" } function groupMembershipModel(e) { this.id = e.id; this.type = e.type; this.user = new userSimpleModel(e.user) } function userSimpleModel(e) { if (e == null || e == undefined) return; this.id = e.id; this.username = e.username; this.name = e.name } function messageModel(e) { this.id = e.id; this.from = new userSimpleModel(e.from); var t = this; this.to = []; if (e.to != null && e.to != undefined) { e.to.forEach(function (e) { t.to.push(new userSimpleModel(e)) }) } this.isStarred = ko.observable(e.isStarred); this.isRead = e.isRead; this.subject = e.subject; this.date = e.date } function languageModel(e) { this.id = e.id; this.name = e.name; this.colour = e.colour; this.systemName = e.systemName } function collectionNameModel(e) { this.id = e == "" ? "(no collection name)" : e; this.name = e == "" ? "(no collection name)" : e } function tagModel(e) { this.name = e } function wordModel(e) { this.id = e.id; this.languageName = e.languageName; this.languageColour = e.languageColour; this.word = e.word; this.state = ko.observable(e.state); this.box = e.box; this.sentence = e.sentence } function textaddLanguageModel(e) { this.id = e.id; this.isRtl = e.isRtl; this.code = e.code; this.name = e.name; this.defaultMediaUrl = e.defaultMediaUrl } function addTextVM(e) { var t = this; t.settings = e; t.languages = ko.observableArray([]); t.selectedLanguage = ko.observableArray([]); t.media = ko.observableArray([]); t.init = function () { $.post(t.settings.urls.ajaxUrl + "/languagesfortexts", { __RequestVerificationToken: t.settings.afToken }, function (e) { e.languages.forEach(function (e) { t.languages.push(new textaddLanguageModel(e)) }); t.selectedLanguage.push(t.settings.languageId) }); t.loadMedia() }; t.loadMedia = function () { $.post(t.settings.urls.ajaxUrl + "/media", { __RequestVerificationToken: t.settings.afToken }, function (e) { e.media.forEach(function (e) { t.media.push(e) }) }) }; t.defaultMediaUrl = ko.computed(function () { if (t.selectedLanguage() == undefined) return false; var e = ko.utils.arrayFirst(t.languages(), function (e) { return e.id == t.selectedLanguage() }); return e == null ? "" : e.defaultMediaUrl }, t); t.canParse = ko.computed(function () { if (t.selectedLanguage() == undefined) return false; var e = ko.utils.arrayFirst(t.languages(), function (e) { return e.id == t.selectedLanguage() }); return e != null && e.code == "jpn" }, t); t.isRtl = ko.computed(function () { if (t.selectedLanguage() == undefined) return "ltr"; var e = ko.utils.arrayFirst(t.languages(), function (e) { return e.id == t.selectedLanguage() }); return e != null && e.isRtl ? "rtl" : "ltr" }); t.init(); ko.applyBindings(t) } function groupMembershipVM(e) { var t = this; t.settings = e; t.items = ko.observableArray([]); t.currentPage = ko.observable(1); t.totalItems = ko.observable(0); t.totalPages = ko.observable(1); t.selectedFolders = ko.observableArray([]); t.textFilter = ko.observable(""); t.init = function () { ko.applyBindings(t) }; t.paging = ko.computed(function () { if (t.totalPages() > 12) { var e = t.currentPage() - 6; var n = t.currentPage() + 6; var r = []; if (e < 2) { e = 1 } else { r.push(1) } var i = true; if (n > t.totalPages() - 1) { n = t.totalPages(); i = false } for (var s = e; s <= n; s++) { r.push(s) } if (i) { r.push(t.totalPages()) } return r } return ko.utils.range(1, t.totalPages) }, t); t.changePage = function (e) { t.currentPage(e) }; t.filter = ko.computed(function () { $.post(t.settings.url + "/searchmembership", { __RequestVerificationToken: t.settings.afToken, groupId: t.settings.groupId, folders: t.selectedFolders(), page: t.currentPage() }, function (e) { t.items.removeAll(); e.items.forEach(function (e) { t.items.push(new groupMembershipModel(e)) }); t.totalItems(e.totalItems); t.totalPages(e.totalPages) }) }, t).extend({ throttle: 500 }); t.init() } function groupsVM(e) { self.settings = e; self.items = ko.observableArray([]); self.currentPage = ko.observable(1); self.totalItems = ko.observable(0); self.totalPages = ko.observable(1); self.selectedFolders = ko.observableArray([]); self.textFilter = ko.observable(""); self.init = function () { ko.applyBindings(self) }; self.paging = ko.computed(function () { if (self.totalPages() > 12) { var e = self.currentPage() - 6; var t = self.currentPage() + 6; var n = []; if (e < 2) { e = 1 } else { n.push(1) } var r = true; if (t > self.totalPages() - 1) { t = self.totalPages(); r = false } for (var i = e; i <= t; i++) { n.push(i) } if (r) { n.push(self.totalPages()) } return n } return ko.utils.range(1, self.totalPages) }, self); self.changePage = function (e) { self.currentPage(e) }; self.filter = ko.computed(function () { $.post(self.settings.url + "/search", { __RequestVerificationToken: self.settings.afToken, filter: self.textFilter(), folders: self.selectedFolders(), page: self.currentPage() }, function (e) { self.items.removeAll(); e.items.forEach(function (e) { self.items.push(new groupModel(e)) }); self.totalItems(e.totalItems); self.totalPages(e.totalPages) }) }, self).extend({ throttle: 500 }); self.init() } function groupViewVM(e) { var t = this; t.settings = e; t.items = ko.observableArray([]); t.currentPage = ko.observable(1); t.totalItems = ko.observable(0); t.totalPages = ko.observable(1); t.limits = ko.observableArray([25, 50, 100, 250, 500, 1e3]); t.limit = ko.observable(25); t.selectedFolders = ko.observableArray(["texts"]); t.textFilter = ko.observable(""); t.init = function () { ko.applyBindings(t) }; t.paging = ko.computed(function () { if (t.totalPages() > 12) { var e = t.currentPage() - 6; var n = t.currentPage() + 6; var r = []; if (e < 2) { e = 1 } else { r.push(1) } var i = true; if (n > t.totalPages() - 1) { n = t.totalPages(); i = false } for (var s = e; s <= n; s++) { r.push(s) } if (i) { r.push(t.totalPages()) } return r } return ko.utils.range(1, t.totalPages) }, t); t.changePage = function (e) { t.currentPage(e); t.checkAll(false) }; t.filter = ko.computed(function () { $.post(t.settings.url + "/groupitems", { __RequestVerificationToken: t.settings.afToken, groupId: t.settings.groupId, filter: t.textFilter(), folders: t.selectedFolders(), limit: t.limit(), page: t.currentPage() }, function (e) { t.items.removeAll(); e.items.forEach(function (e) { t.items.push(new groupItemModel(e)) }); t.totalItems(e.totalItems); t.totalPages(e.totalPages) }) }, t).extend({ throttle: 500 }); t.init() } function languagesVM(e) { var t = this; t.settings = e; t.items = ko.observableArray([]); t.notSetLanguages = ko.observable(false); t.init = function () { $.post(t.settings.url + "/search", { __RequestVerificationToken: t.settings.afToken }, function (e) { t.items.removeAll(); e.items.forEach(function (e) { t.items.push(new languageModel(e)); if (e.systemName == "Not Yet Set") t.notSetLanguages(true) }) }); ko.applyBindings(t) }; t.deleteLanguage = function (e) { if (!confirm("Are you sure you want to delete this. This will also delete all the texts/videos in this language")) return; $.post(t.settings.url + "/deletelanguage", { id: e.id, __RequestVerificationToken: t.settings.afToken }, function (n) { if (n != null && n == "OK") { t.items.remove(function (t) { return t.id == e.id }) } }) }; t.init() } function messagesVM(e) { var t = this; t.settings = e; t.items = ko.observableArray([]); t.currentPage = ko.observable(1); t.totalItems = ko.observable(0); t.totalPages = ko.observable(1); t.selectedFolders = ko.observable("inbox"); t.textFilter = ko.observable(""); t.init = function () { ko.applyBindings(t) }; t.paging = ko.computed(function () { if (t.totalPages() > 12) { var e = t.currentPage() - 6; var n = t.currentPage() + 6; var r = []; if (e < 2) { e = 1 } else { r.push(1) } var i = true; if (n > t.totalPages() - 1) { n = t.totalPages(); i = false } for (var s = e; s <= n; s++) { r.push(s) } if (i) { r.push(t.totalPages()) } return r } return ko.utils.range(1, t.totalPages) }, t); t.changePage = function (e) { t.currentPage(e) }; t.filter = ko.computed(function () { var e = "in"; if (t.selectedFolders() == "sent") { e = "out" } $.post(t.settings.url + "/search" + e, { __RequestVerificationToken: t.settings.afToken, filter: t.textFilter(), folders: t.selectedFolders(), page: t.currentPage() }, function (e) { t.items.removeAll(); e.items.forEach(function (e) { t.items.push(new messageModel(e)) }); t.totalItems(e.totalItems); t.totalPages(e.totalPages) }) }, t).extend({ throttle: 500 }); t.star = function (e) { t.changeStar(e.id, true) }; t.unstar = function (e) { t.changeStar(e.id, false) }; t.changeStar = function (e, n) { $.post(t.settings.url + "/star", { __RequestVerificationToken: t.settings.afToken, id: e, status: n }, function (e) { var n = ko.utils.arrayFirst(t.items(), function (t) { return t.id == e.id }); if (n != null) { n.isStarred(e.status) } }) }; t.deleteMessage = function (e) { if (!confirm("Are you sure you want to delete this message?")) { return } $.post(t.settings.url + "/delete", { __RequestVerificationToken: t.settings.afToken, id: e.id }, function (e) { t.items.remove(function (t) { return t.id == e }) }) }; t.init() } function mergedVM(e) { var t = this; t.settings = e; t.items = ko.observableArray([]); t.currentPage = ko.observable(1); t.totalItems = ko.observable(0); t.totalPages = ko.observable(1); t.checkAll = ko.observable(false); t.limits = ko.observableArray([25, 50, 100, 250, 500, 1e3]); t.limit = ko.observable(50); t.states = ko.observableArray(["Known", "Unknown", "Not Seen", "Ignored"]); t.newState = ko.observable(""); t.orderBy = ko.observable("language"); t.orderDirection = ko.observable("asc"); t.collectionNames = ko.observableArray(["(none)"]); t.itemTypes = ko.observableArray(["Texts", "Videos"]); t.selectedItemTypes = ko.observableArray(["Texts", "Videos"]); t.selectedItems = ko.observableArray([]); t.selectedLanguages = ko.observableArray([]); t.selectedCollections = ko.observableArray([]); var n = localStorage[e.index + "_filter"]; if (n == null) { n = "" } t.textFilter = ko.observable(n); t.selectedStates = ko.observableArray([]); t.selectedBoxes = ko.observableArray([]); t.tagsToAdd = ko.observable(""); t.tagsToRemove = ko.observable(""); t.newCollectionName = ko.observable(""); t.groupName = ko.observable(""); t.ungroupName = ko.observable(""); t.showAddTagsDD = function () { $("#addTagsDD").toggle() }; t.showRemoveTagsDD = function () { $("#removeTagsDD").toggle() }; t.showChangeCollectionDD = function () { $("#changeCollectionDD").toggle() }; t.showShareDD = function () { $("#shareDD").toggle() }; t.showUnshareDD = function () { $("#unshareDD").toggle() }; t.showDeleteDD = function () { $("#deleteDD").toggle() }; t.showChangeStateDD = function () { $("#changeStateDD").toggle() }; t.init = function () { ko.applyBindings(t) }; t.changeOrder = function (e, n, r) { var i = $(r.currentTarget); $("#headerRow th a").removeClass("sprite-downarrow").addClass("sprite-uparrow"); if (t.orderBy() == e) { if (t.orderDirection() == "asc") { t.orderDirection("desc"); i.removeClass("sprite-uparrow").addClass("sprite-downarrow") } else { t.orderDirection("asc") } } else { t.orderDirection("asc"); t.orderBy(e) } t.changePage(1) }; t.paging = ko.computed(function () { if (t.totalPages() > 12) { var e = t.currentPage() - 6; var n = t.currentPage() + 6; var r = []; if (e < 2) { e = 1 } else { r.push(1) } var i = true; if (n > t.totalPages() - 1) { n = t.totalPages(); i = false } for (var s = e; s <= n; s++) { r.push(s) } if (i) { r.push(t.totalPages()) } return r } return ko.utils.range(1, t.totalPages) }, t); t.changePage = function (e) { t.selectedItems.removeAll(); t.currentPage(e); t.checkAll(false) }; t.selectAll = function () { if (t.checkAll()) { t.selectedItems(t.items().map(function (e) { return e.id })) } else { t.selectedItems.removeAll() } return true }; t.shareWithGroup = function () { $("#shareGroupStatus").show(); $.post(t.settings.url + "/share", { __RequestVerificationToken: t.settings.afToken, items: t.selectedItems(), share: "share", groupName: t.groupName() }, function (e) { $("#shareGroupStatus").hide(); if (e != null && e.result == "OK") { e.updates.forEach(function (e) { var n = ko.utils.arrayFirst(t.items(), function (t) { return t.id == e.Key }); if (n != null) { n.isShared(e.Value.IsShared); n.sharedGroups(e.Value.SharedGroups) } }); $("#shareDD").stop().css("background-color", "white").animate({ backgroundColor: "#E9FFD6" }, 1500); t.groupName("") } else { $("#shareDD").stop().css("background-color", "white").animate({ backgroundColor: "#FFF4F4" }, 1500) } }) }; t.unshareFromGroup = function () { $("#unshareGroupStatus").show(); $.post(t.settings.url + "/share", { __RequestVerificationToken: t.settings.afToken, items: t.selectedItems(), share: "unshare", groupName: t.ungroupName() }, function (e) { $("#unshareGroupStatus").hide(); if (e != null && e.result == "OK") { e.updates.forEach(function (e) { var n = ko.utils.arrayFirst(t.items(), function (t) { return t.id == e.Key }); if (n != null) { n.isShared(e.Value.IsShared); n.sharedGroups(e.Value.SharedGroups) } }); $("#unshareDD").stop().css("background-color", "white").animate({ backgroundColor: "#E9FFD6" }, 1500); t.ungroupName("") } else { $("#unshareDD").stop().css("background-color", "white").animate({ backgroundColor: "#FFF4F4" }, 1500) } }) }; t.addTags = function () { $("#addTagsStatus").show(); $.post(t.settings.url + "/addtags", { __RequestVerificationToken: t.settings.afToken, items: t.selectedItems(), tagsToAdd: t.tagsToAdd() }, function (e) { $("#addTagsStatus").hide(); if (e == "OK") { $("#addTagsDD").stop().css("background-color", "white").animate({ backgroundColor: "#E9FFD6" }, 1500); t.tagsToAdd("") } else { $("#addTagsDD").stop().css("background-color", "white").animate({ backgroundColor: "#FFF4F4" }, 1500) } }) }; t.removeTags = function () { $("#removeTagsStatus").show(); $.post(t.settings.url + "/removetags", { __RequestVerificationToken: t.settings.afToken, items: t.selectedItems(), tagsToRemove: t.tagsToRemove() }, function (e) { $("#removeTagsStatus").hide(); if (e == "OK") { $("#removeTagsDD").stop().css("background-color", "white").animate({ backgroundColor: "#E9FFD6" }, 1500); t.tagsToRemove("") } else { $("#removeTagsDD").stop().css("background-color", "white").animate({ backgroundColor: "#FFF4F4" }, 1500) } }) }; t.changeCollectionName = function () { $("#rchangeCollectionStatus").show(); $.post(t.settings.url + "/changecollectionname", { __RequestVerificationToken: t.settings.afToken, items: t.selectedItems(), newCollectionName: t.newCollectionName() }, function (e) { $("#changeCollectionStatus").hide(); if (e == "OK") { t.selectedItems().forEach(function (e) { var n = ko.utils.arrayFirst(t.items(), function (t) { return t.id == e }); if (n != null) { n.collectionName(t.newCollectionName()) } }); $("#changeCollectionDD").stop().css("background-color", "white").animate({ backgroundColor: "#E9FFD6" }, 1500); t.newCollectionName("") } else { $("#changeCollectionDD").stop().css("background-color", "white").animate({ backgroundColor: "#FFF4F4" }, 1500) } }) }; t.deleteItem = function (e) { if (!confirm("Are you sure you want to delete this?")) return; $.post(t.settings.url + "/delete", { __RequestVerificationToken: t.settings.afToken, items: [e.id] }, function (n) { if (n == "OK") { t.items.remove(function (t) { return t.id == e.id }) } }) }; t.deleteItems = function () { $("#deleteStatus").show(); $.post(t.settings.url + "/delete", { __RequestVerificationToken: t.settings.afToken, items: t.selectedItems() }, function (e) { $("#deleteStatus").hide(); if (e == "OK") { $("#deleteDD").stop().css("background-color", "white").animate({ backgroundColor: "#E9FFD6" }, 1500); t.currentPage(0); t.currentPage(1) } else { $("#deleteDD").stop().css("background-color", "white").animate({ backgroundColor: "#FFF4F4" }, 1500) } }) }; t.changeStatus = function () { $("#changeStateStatus").show(); $.post(t.settings.url + "/changestatus", { __RequestVerificationToken: t.settings.afToken, items: t.selectedItems(), newState: t.newState() }, function (e) { $("#changeStateStatus").hide(); if (e == "OK") { t.selectedItems().forEach(function (e) { var n = ko.utils.arrayFirst(t.items(), function (t) { return t.id == e }); if (n != null) { n.state(t.newState()) } }); $("#changeStateDD").stop().css("background-color", "white").animate({ backgroundColor: "#E9FFD6" }, 1500); t.newState("") } else { $("#changeStateDD").stop().css("background-color", "white").animate({ backgroundColor: "#FFF4F4" }, 1500) } }) }; t.filter = ko.computed(function () { t.selectedItems([]); localStorage[e.index + "_filter"] = t.textFilter(); if (e.index == "words") { $.post(t.settings.url + "/search", { __RequestVerificationToken: t.settings.afToken, filter: t.textFilter(), languages: t.selectedLanguages(), states: t.selectedStates(), boxes: t.selectedBoxes(), orderBy: t.orderBy(), orderDirection: t.orderDirection(), limit: t.limit(), page: t.currentPage() }, function (e) { t.items.removeAll(); e.items.forEach(function (e) { t.items.push(new wordModel(e)) }); t.totalItems(e.totalItems); t.totalPages(e.totalPages) }) } else if (e.index == "items") { t.selectedItems([]); $.post(t.settings.url + "/search", { __RequestVerificationToken: t.settings.afToken, types: t.selectedItemTypes(), filter: t.textFilter(), languages: t.selectedLanguages(), collectionNames: t.selectedCollections(), orderBy: t.orderBy(), orderDirection: t.orderDirection(), limit: t.limit(), page: t.currentPage() }, function (e) { t.items.removeAll(); e.items.forEach(function (e) { t.items.push(new itemModel(e)) }); if (e.collectionNames != null) { t.collectionNames.removeAll(); t.collectionNames.push("(none)"); e.collectionNames.forEach(function (e) { t.collectionNames.push(e) }) } t.totalItems(e.totalItems); t.totalPages(e.totalPages) }) } }, t).extend({ throttle: 500 }); t.init() } $.ajaxSetup({ scriptCharset: "utf-8", contentType: "application/x-www-form-urlencoded; charset=UTF-8" }); $.ajaxSettings.traditional = true; $.ajaxSetup({ type: "post" })