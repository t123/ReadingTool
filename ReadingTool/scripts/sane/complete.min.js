(function (a) { function d(a, b, d) { var e = a[0].parentNode, f = e.cycleTimeout; if (f) { clearTimeout(f); e.cycleTimeout = 0 } b.nextSlide = b.currSlide + d; if (b.nextSlide < 0) { b.nextSlide = a.length - 1 } else if (b.nextSlide >= a.length) { b.nextSlide = 0 } c(a, b, 1, d >= 0); return false } function c(b, d, e, f) { function l() { if (d.timeout) g.cycleTimeout = setTimeout(function () { c(b, d, 0, !d.rev) }, d.timeout) } if (d.busy) return; var g = b[0].parentNode, h = b[d.currSlide], i = b[d.nextSlide]; if (g.cycleTimeout === 0 && !e) return; if (e || !g.cyclePause) { if (d.before.length) a.each(d.before, function (a, b) { b.apply(i, [h, i, d, f]) }); var j = function () { if (a.browser.msie) this.style.removeAttribute("filter"); a.each(d.after, function (a, b) { b.apply(i, [h, i, d, f]) }); l() }; if (d.nextSlide != d.currSlide) { d.busy = 1; a.fn.cycle.custom(h, i, d, j) } var k = d.nextSlide + 1 == b.length; d.nextSlide = k ? 0 : d.nextSlide + 1; d.currSlide = k ? b.length - 1 : d.nextSlide - 1 } else { l() } } var b = "Lite-1.5"; a.fn.cycle = function (b) { return this.each(function () { b = b || {}; if (this.cycleTimeout) clearTimeout(this.cycleTimeout); this.cycleTimeout = 0; this.cyclePause = 0; var e = a(this); var f = b.slideExpr ? a(b.slideExpr, this) : e.children(); var g = f.get(); if (g.length < 2) { window.console && console.log("terminating; too few slides: " + g.length); return } var h = a.extend({}, a.fn.cycle.defaults, b || {}, a.metadata ? e.metadata() : a.meta ? e.data() : {}); var i = a.isFunction(e.data) ? e.data(h.metaAttr) : null; if (i) h = a.extend(h, i); h.before = h.before ? [h.before] : []; h.after = h.after ? [h.after] : []; h.after.unshift(function () { h.busy = 0 }); var j = this.className; h.width = parseInt((j.match(/w:(\d+)/) || [])[1]) || h.width; h.height = parseInt((j.match(/h:(\d+)/) || [])[1]) || h.height; h.timeout = parseInt((j.match(/t:(\d+)/) || [])[1]) || h.timeout; if (e.css("position") == "static") e.css("position", "relative"); if (h.width) e.width(h.width); if (h.height && h.height != "auto") e.height(h.height); var k = 0; f.css({ position: "absolute", top: 0 }).each(function (b) { a(this).css("z-index", g.length - b) }); a(g[k]).css("opacity", 1).show(); if (a.browser.msie) g[k].style.removeAttribute("filter"); if (h.fit && h.width) f.width(h.width); if (h.fit && h.height && h.height != "auto") f.height(h.height); if (h.pause) e.hover(function () { this.cyclePause = 1 }, function () { this.cyclePause = 0 }); var l = a.fn.cycle.transitions[h.fx]; l && l(e, f, h); f.each(function () { var b = a(this); this.cycleH = h.fit && h.height ? h.height : b.height(); this.cycleW = h.fit && h.width ? h.width : b.width() }); if (h.cssFirst) a(f[k]).css(h.cssFirst); if (h.timeout) { if (h.speed.constructor == String) h.speed = { slow: 600, fast: 200}[h.speed] || 400; if (!h.sync) h.speed = h.speed / 2; while (h.timeout - h.speed < 250) h.timeout += h.speed } h.speedIn = h.speed; h.speedOut = h.speed; h.slideCount = g.length; h.currSlide = k; h.nextSlide = 1; var m = f[k]; if (h.before.length) h.before[0].apply(m, [m, m, h, true]); if (h.after.length > 1) h.after[1].apply(m, [m, m, h, true]); if (h.click && !h.next) h.next = h.click; if (h.next) a(h.next).unbind("click.cycle").bind("click.cycle", function () { return d(g, h, h.rev ? -1 : 1) }); if (h.prev) a(h.prev).unbind("click.cycle").bind("click.cycle", function () { return d(g, h, h.rev ? 1 : -1) }); if (h.timeout) this.cycleTimeout = setTimeout(function () { c(g, h, 0, !h.rev) }, h.timeout + (h.delay || 0)) }) }; a.fn.cycle.custom = function (b, c, d, e) { var f = a(b), g = a(c); g.css(d.cssBefore); var h = function () { g.animate(d.animIn, d.speedIn, d.easeIn, e) }; f.animate(d.animOut, d.speedOut, d.easeOut, function () { f.css(d.cssAfter); if (!d.sync) h() }); if (d.sync) h() }; a.fn.cycle.transitions = { fade: function (a, b, c) { b.not(":eq(0)").hide(); c.cssBefore = { opacity: 0, display: "block" }; c.cssAfter = { display: "none" }; c.animOut = { opacity: 0 }; c.animIn = { opacity: 1} }, fadeout: function (b, c, d) { d.before.push(function (b, c, d, e) { a(b).css("zIndex", d.slideCount + (e === true ? 1 : 0)); a(c).css("zIndex", d.slideCount + (e === true ? 0 : 1)) }); c.not(":eq(0)").hide(); d.cssBefore = { opacity: 1, display: "block", zIndex: 1 }; d.cssAfter = { display: "none", zIndex: 0 }; d.animOut = { opacity: 0} } }; a.fn.cycle.ver = function () { return b }; a.fn.cycle.defaults = { animIn: {}, animOut: {}, fx: "fade", after: null, before: null, cssBefore: {}, cssAfter: {}, delay: 0, fit: 0, height: "auto", metaAttr: "cycle", next: null, pause: 0, prev: null, speed: 1e3, slideExpr: null, sync: 1, timeout: 4e3} })(jQuery)
$.fn.flashMessage = function (a) { function d(a) { $.cookie("Flash." + a, null, { path: "/" }) } function c() { $.each(new Array("Success", "Error", "Warning", "Info"), function (b, c) { var e = $.cookie("Flash." + c); if (e) { a.message = e; a.alert = c; d(c); return } }) } var b = this; a = $.extend({}, a, { timeout: 0, alert: "info" }); if (!a.message) { c(a) } if (a.message) { $(b).addClass("alert-" + a.alert.toString().toLowerCase()); if (typeof a.message === "string") { $("p", b).html("<span>" + a.message + "</span>") } else { b.empty().append(a.message) } } else { return } if (b.children().length === 0) return; b.fadeIn().one("click", function () { $(this).fadeOut() }); if (a.timeout > 0) { setTimeout(function () { b.fadeOut() }, a.timeout) } return this }
jQuery.cookie = function (a, b, c) { if (arguments.length > 1 && String(b) !== "[object Object]") { c = jQuery.extend({}, c); if (b === null || b === undefined) { c.expires = -1 } if (typeof c.expires === "number") { var d = c.expires, e = c.expires = new Date; e.setDate(e.getDate() + d) } b = String(b); return document.cookie = [encodeURIComponent(a), "=", c.raw ? b : encodeURIComponent(b), c.expires ? "; expires=" + c.expires.toUTCString() : "", c.path ? "; path=" + c.path : "", c.domain ? "; domain=" + c.domain : "", c.secure ? "; secure" : ""].join("") } c = b || {}; var f, g = c.raw ? function (a) { return a } : decodeURIComponent; return (f = (new RegExp("(?:^|; )" + encodeURIComponent(a) + "=([^;]*)")).exec(document.cookie)) ? g(f[1]) : null }
$(function () { $("a.help").hover(function () { clearTimeout($(this).data("timeout")); $(this).parents("form").children("div.input_wrapper").find("div.formhelp").hide(); $(this).parent().find("div.formhelp").show() }, function () { var a = $(this); var b = setTimeout(function () { a.parent().find("div.formhelp").fadeOut("slow") }, 500); a.data("timeout", b) }) })
function mergedVM(a) { var b = this; b.settings = a; b.items = ko.observableArray([]); b.currentPage = ko.observable(1); b.totalItems = ko.observable(0); b.totalPages = ko.observable(1); b.checkAll = ko.observable(false); b.limits = ko.observableArray([25, 50, 100, 250, 500, 1e3]); b.limit = ko.observable(25); b.states = ko.observableArray(["Known", "Unknown", "Not Seen", "Ignored"]); b.newState = ko.observable(""); b.orderBy = ko.observable("language"); b.orderDirection = ko.observable("asc"); b.collectionNames = ko.observableArray(["(none)"]); b.itemTypes = ko.observableArray(["Texts", "Videos"]); b.selectedItemTypes = ko.observableArray(["Texts", "Videos"]); b.selectedItems = ko.observableArray([]); b.selectedLanguages = ko.observableArray([]); b.selectedCollections = ko.observableArray([]); b.textFilter = ko.observable(""); b.selectedStates = ko.observableArray([]); b.selectedBoxes = ko.observableArray([]); b.tagsToAdd = ko.observable(""); b.tagsToRemove = ko.observable(""); b.newCollectionName = ko.observable(""); b.groupName = ko.observable(""); b.ungroupName = ko.observable(""); b.showAddTagsDD = function () { $("#addTagsDD").toggle() }; b.showRemoveTagsDD = function () { $("#removeTagsDD").toggle() }; b.showChangeCollectionDD = function () { $("#changeCollectionDD").toggle() }; b.showShareDD = function () { $("#shareDD").toggle() }; b.showUnshareDD = function () { $("#unshareDD").toggle() }; b.showDeleteDD = function () { $("#deleteDD").toggle() }; b.showChangeStateDD = function () { $("#changeStateDD").toggle() }; b.init = function () { ko.applyBindings(b) }; b.changeOrder = function (a, c, d) { var e = $(d.currentTarget); $("#headerRow th a").removeClass("sprite-downarrow").addClass("sprite-uparrow"); if (b.orderBy() == a) { if (b.orderDirection() == "asc") { b.orderDirection("desc"); e.removeClass("sprite-uparrow").addClass("sprite-downarrow") } else { b.orderDirection("asc") } } else { b.orderDirection("asc"); b.orderBy(a) } b.changePage(1) }; b.paging = ko.computed(function () { if (b.totalPages() > 12) { var a = b.currentPage() - 6; var c = b.currentPage() + 6; var d = []; if (a < 2) { a = 1 } else { d.push(1) } var e = true; if (c > b.totalPages() - 1) { c = b.totalPages(); e = false } for (var f = a; f <= c; f++) { d.push(f) } if (e) { d.push(b.totalPages()) } return d } return ko.utils.range(1, b.totalPages) }, b); b.changePage = function (a) { b.selectedItems.removeAll(); b.currentPage(a); b.checkAll(false) }; b.selectAll = function () { if (b.checkAll()) { b.selectedItems(b.items().map(function (a) { return a.id })) } else { b.selectedItems.removeAll() } return true }; b.shareWithGroup = function () { $("#shareGroupStatus").show(); $.post(b.settings.url + "/share", { __RequestVerificationToken: b.settings.afToken, items: b.selectedItems(), share: "share", groupName: b.groupName() }, function (a) { $("#shareGroupStatus").hide(); if (a != null && a.result == "OK") { a.updates.forEach(function (a) { var c = ko.utils.arrayFirst(b.items(), function (b) { return b.id == a.Key }); if (c != null) { c.isShared(a.Value.IsShared); c.sharedGroups(a.Value.SharedGroups) } }); $("#shareDD").stop().css("background-color", "white").animate({ backgroundColor: "#E9FFD6" }, 1500); b.groupName("") } else { $("#shareDD").stop().css("background-color", "white").animate({ backgroundColor: "#FFF4F4" }, 1500) } }) }; b.unshareFromGroup = function () { $("#unshareGroupStatus").show(); $.post(b.settings.url + "/share", { __RequestVerificationToken: b.settings.afToken, items: b.selectedItems(), share: "unshare", groupName: b.ungroupName() }, function (a) { $("#unshareGroupStatus").hide(); if (a != null && a.result == "OK") { a.updates.forEach(function (a) { var c = ko.utils.arrayFirst(b.items(), function (b) { return b.id == a.Key }); if (c != null) { c.isShared(a.Value.IsShared); c.sharedGroups(a.Value.SharedGroups) } }); $("#unshareDD").stop().css("background-color", "white").animate({ backgroundColor: "#E9FFD6" }, 1500); b.ungroupName("") } else { $("#unshareDD").stop().css("background-color", "white").animate({ backgroundColor: "#FFF4F4" }, 1500) } }) }; b.addTags = function () { $("#addTagsStatus").show(); $.post(b.settings.url + "/addtags", { __RequestVerificationToken: b.settings.afToken, items: b.selectedItems(), tagsToAdd: b.tagsToAdd() }, function (a) { $("#addTagsStatus").hide(); if (a == "OK") { $("#addTagsDD").stop().css("background-color", "white").animate({ backgroundColor: "#E9FFD6" }, 1500); b.tagsToAdd("") } else { $("#addTagsDD").stop().css("background-color", "white").animate({ backgroundColor: "#FFF4F4" }, 1500) } }) }; b.removeTags = function () { $("#removeTagsStatus").show(); $.post(b.settings.url + "/removetags", { __RequestVerificationToken: b.settings.afToken, items: b.selectedItems(), tagsToRemove: b.tagsToRemove() }, function (a) { $("#removeTagsStatus").hide(); if (a == "OK") { $("#removeTagsDD").stop().css("background-color", "white").animate({ backgroundColor: "#E9FFD6" }, 1500); b.tagsToRemove("") } else { $("#removeTagsDD").stop().css("background-color", "white").animate({ backgroundColor: "#FFF4F4" }, 1500) } }) }; b.changeCollectionName = function () { $("#rchangeCollectionStatus").show(); $.post(b.settings.url + "/changecollectionname", { __RequestVerificationToken: b.settings.afToken, items: b.selectedItems(), newCollectionName: b.newCollectionName() }, function (a) { $("#changeCollectionStatus").hide(); if (a == "OK") { b.selectedItems().forEach(function (a) { var c = ko.utils.arrayFirst(b.items(), function (b) { return b.id == a }); if (c != null) { c.collectionName(b.newCollectionName()) } }); $("#changeCollectionDD").stop().css("background-color", "white").animate({ backgroundColor: "#E9FFD6" }, 1500); b.newCollectionName("") } else { $("#changeCollectionDD").stop().css("background-color", "white").animate({ backgroundColor: "#FFF4F4" }, 1500) } }) }; b.deleteItem = function (a) { if (!confirm("Are you sure you want to delete this?")) return; $.post(b.settings.url + "/delete", { __RequestVerificationToken: b.settings.afToken, items: [a.id] }, function (c) { if (c == "OK") { b.items.remove(function (b) { return b.id == a.id }) } }) }; b.deleteItems = function () { $("#deleteStatus").show(); $.post(b.settings.url + "/delete", { __RequestVerificationToken: b.settings.afToken, items: b.selectedItems() }, function (a) { $("#deleteStatus").hide(); if (a == "OK") { $("#deleteDD").stop().css("background-color", "white").animate({ backgroundColor: "#E9FFD6" }, 1500); b.currentPage(0); b.currentPage(1) } else { $("#deleteDD").stop().css("background-color", "white").animate({ backgroundColor: "#FFF4F4" }, 1500) } }) }; b.changeStatus = function () { $("#changeStateStatus").show(); $.post(b.settings.url + "/changestatus", { __RequestVerificationToken: b.settings.afToken, items: b.selectedItems(), newState: b.newState() }, function (a) { $("#changeStateStatus").hide(); if (a == "OK") { b.selectedItems().forEach(function (a) { var c = ko.utils.arrayFirst(b.items(), function (b) { return b.id == a }); if (c != null) { c.state(b.newState()) } }); $("#changeStateDD").stop().css("background-color", "white").animate({ backgroundColor: "#E9FFD6" }, 1500); b.newState("") } else { $("#changeStateDD").stop().css("background-color", "white").animate({ backgroundColor: "#FFF4F4" }, 1500) } }) }; b.filter = ko.computed(function () { b.selectedItems([]); if (a.index == "words") { $.post(b.settings.url + "/search", { __RequestVerificationToken: b.settings.afToken, filter: b.textFilter(), languages: b.selectedLanguages(), states: b.selectedStates(), boxes: b.selectedBoxes(), orderBy: b.orderBy(), orderDirection: b.orderDirection(), limit: b.limit(), page: b.currentPage() }, function (a) { b.items.removeAll(); a.items.forEach(function (a) { b.items.push(new wordModel(a)) }); b.totalItems(a.totalItems); b.totalPages(a.totalPages) }) } else if (a.index == "items") { b.selectedItems([]); $.post(b.settings.url + "/search", { __RequestVerificationToken: b.settings.afToken, types: b.selectedItemTypes(), filter: b.textFilter(), languages: b.selectedLanguages(), collectionNames: b.selectedCollections(), orderBy: b.orderBy(), orderDirection: b.orderDirection(), limit: b.limit(), page: b.currentPage() }, function (a) { b.items.removeAll(); a.items.forEach(function (a) { b.items.push(new itemModel(a)) }); if (a.collectionNames != null) { b.collectionNames.removeAll(); b.collectionNames.push("(none)"); a.collectionNames.forEach(function (a) { b.collectionNames.push(a) }) } b.totalItems(a.totalItems); b.totalPages(a.totalPages) }) } }, b).extend({ throttle: 500 }); b.init() } function messagesVM(a) { var b = this; b.settings = a; b.items = ko.observableArray([]); b.currentPage = ko.observable(1); b.totalItems = ko.observable(0); b.totalPages = ko.observable(1); b.selectedFolders = ko.observable("inbox"); b.textFilter = ko.observable(""); b.init = function () { ko.applyBindings(b) }; b.paging = ko.computed(function () { if (b.totalPages() > 12) { var a = b.currentPage() - 6; var c = b.currentPage() + 6; var d = []; if (a < 2) { a = 1 } else { d.push(1) } var e = true; if (c > b.totalPages() - 1) { c = b.totalPages(); e = false } for (var f = a; f <= c; f++) { d.push(f) } if (e) { d.push(b.totalPages()) } return d } return ko.utils.range(1, b.totalPages) }, b); b.changePage = function (a) { b.currentPage(a) }; b.filter = ko.computed(function () { var a = "in"; if (b.selectedFolders() == "sent") { a = "out" } $.post(b.settings.url + "/search" + a, { __RequestVerificationToken: b.settings.afToken, filter: b.textFilter(), folders: b.selectedFolders(), page: b.currentPage() }, function (a) { b.items.removeAll(); a.items.forEach(function (a) { b.items.push(new messageModel(a)) }); b.totalItems(a.totalItems); b.totalPages(a.totalPages) }) }, b).extend({ throttle: 500 }); b.star = function (a) { b.changeStar(a.id, true) }; b.unstar = function (a) { b.changeStar(a.id, false) }; b.changeStar = function (a, c) { $.post(b.settings.url + "/star", { __RequestVerificationToken: b.settings.afToken, id: a, status: c }, function (a) { var c = ko.utils.arrayFirst(b.items(), function (b) { return b.id == a.id }); if (c != null) { c.isStarred(a.status) } }) }; b.deleteMessage = function (a) { if (!confirm("Are you sure you want to delete this message?")) { return } $.post(b.settings.url + "/delete", { __RequestVerificationToken: b.settings.afToken, id: a.id }, function (a) { b.items.remove(function (b) { return b.id == a }) }) }; b.init() } function languagesVM(a) { var b = this; b.settings = a; b.items = ko.observableArray([]); b.notSetLanguages = ko.observable(false); b.init = function () { $.post(b.settings.url + "/search", { __RequestVerificationToken: b.settings.afToken }, function (a) { b.items.removeAll(); a.items.forEach(function (a) { b.items.push(new languageModel(a)); if (a.systemName == "Not Yet Set") b.notSetLanguages(true) }) }); ko.applyBindings(b) }; b.deleteLanguage = function (a) { if (!confirm("Are you sure you want to delete this. This will also delete all the texts/videos in this language")) return; $.post(b.settings.url + "/deletelanguage", { id: a.id, __RequestVerificationToken: b.settings.afToken }, function (c) { if (c != null && c == "OK") { b.items.remove(function (b) { return b.id == a.id }) } }) }; b.init() } function groupViewVM(a) { var b = this; b.settings = a; b.items = ko.observableArray([]); b.currentPage = ko.observable(1); b.totalItems = ko.observable(0); b.totalPages = ko.observable(1); b.limits = ko.observableArray([25, 50, 100, 250, 500, 1e3]); b.limit = ko.observable(25); b.selectedFolders = ko.observableArray(["texts"]); b.textFilter = ko.observable(""); b.init = function () { ko.applyBindings(b) }; b.paging = ko.computed(function () { if (b.totalPages() > 12) { var a = b.currentPage() - 6; var c = b.currentPage() + 6; var d = []; if (a < 2) { a = 1 } else { d.push(1) } var e = true; if (c > b.totalPages() - 1) { c = b.totalPages(); e = false } for (var f = a; f <= c; f++) { d.push(f) } if (e) { d.push(b.totalPages()) } return d } return ko.utils.range(1, b.totalPages) }, b); b.changePage = function (a) { b.currentPage(a); b.checkAll(false) }; b.filter = ko.computed(function () { $.post(b.settings.url + "/groupitems", { __RequestVerificationToken: b.settings.afToken, groupId: b.settings.groupId, filter: b.textFilter(), folders: b.selectedFolders(), limit: b.limit(), page: b.currentPage() }, function (a) { b.items.removeAll(); a.items.forEach(function (a) { b.items.push(new groupItemModel(a)) }); b.totalItems(a.totalItems); b.totalPages(a.totalPages) }) }, b).extend({ throttle: 500 }); b.init() } function groupsVM(a) { self.settings = a; self.items = ko.observableArray([]); self.currentPage = ko.observable(1); self.totalItems = ko.observable(0); self.totalPages = ko.observable(1); self.selectedFolders = ko.observableArray([]); self.textFilter = ko.observable(""); self.init = function () { ko.applyBindings(self) }; self.paging = ko.computed(function () { if (self.totalPages() > 12) { var a = self.currentPage() - 6; var b = self.currentPage() + 6; var c = []; if (a < 2) { a = 1 } else { c.push(1) } var d = true; if (b > self.totalPages() - 1) { b = self.totalPages(); d = false } for (var e = a; e <= b; e++) { c.push(e) } if (d) { c.push(self.totalPages()) } return c } return ko.utils.range(1, self.totalPages) }, self); self.changePage = function (a) { self.currentPage(a) }; self.filter = ko.computed(function () { $.post(self.settings.url + "/search", { __RequestVerificationToken: self.settings.afToken, filter: self.textFilter(), folders: self.selectedFolders(), page: self.currentPage() }, function (a) { self.items.removeAll(); a.items.forEach(function (a) { self.items.push(new groupModel(a)) }); self.totalItems(a.totalItems); self.totalPages(a.totalPages) }) }, self).extend({ throttle: 500 }); self.init() } function groupMembershipVM(a) { var b = this; b.settings = a; b.items = ko.observableArray([]); b.currentPage = ko.observable(1); b.totalItems = ko.observable(0); b.totalPages = ko.observable(1); b.selectedFolders = ko.observableArray([]); b.textFilter = ko.observable(""); b.init = function () { ko.applyBindings(b) }; b.paging = ko.computed(function () { if (b.totalPages() > 12) { var a = b.currentPage() - 6; var c = b.currentPage() + 6; var d = []; if (a < 2) { a = 1 } else { d.push(1) } var e = true; if (c > b.totalPages() - 1) { c = b.totalPages(); e = false } for (var f = a; f <= c; f++) { d.push(f) } if (e) { d.push(b.totalPages()) } return d } return ko.utils.range(1, b.totalPages) }, b); b.changePage = function (a) { b.currentPage(a) }; b.filter = ko.computed(function () { $.post(b.settings.url + "/searchmembership", { __RequestVerificationToken: b.settings.afToken, groupId: b.settings.groupId, folders: b.selectedFolders(), page: b.currentPage() }, function (a) { b.items.removeAll(); a.items.forEach(function (a) { b.items.push(new groupMembershipModel(a)) }); b.totalItems(a.totalItems); b.totalPages(a.totalPages) }) }, b).extend({ throttle: 500 }); b.init() } function addTextVM(a) { var b = this; b.settings = a; b.languages = ko.observableArray([]); b.selectedLanguage = ko.observableArray([]); b.init = function () { $.post(b.settings.urls.ajaxUrl + "/languagesfortexts", { __RequestVerificationToken: b.settings.afToken }, function (a) { a.languages.forEach(function (a) { b.languages.push(new textaddLanguageModel(a)) }); b.selectedLanguage.push(b.settings.languageId) }) }; b.canParse = ko.computed(function () { if (b.selectedLanguage() == undefined) return false; var a = ko.utils.arrayFirst(b.languages(), function (a) { return a.id == b.selectedLanguage() }); return a != null && a.code == "jpn" }, b); b.isRtl = ko.computed(function () { if (b.selectedLanguage() == undefined) return "ltr"; var a = ko.utils.arrayFirst(b.languages(), function (a) { return a.id == b.selectedLanguage() }); return a != null && a.isRtl ? "rtl" : "ltr" }); b.init(); ko.applyBindings(b) } function textaddLanguageModel(a) { this.id = a.id; this.isRtl = a.isRtl; this.code = a.code; this.name = a.name } function wordModel(a) { this.id = a.id; this.languageName = a.languageName; this.languageColour = a.languageColour; this.word = a.word; this.state = ko.observable(a.state); this.box = a.box; this.sentence = a.sentence } function tagModel(a) { this.name = a } function collectionNameModel(a) { this.id = a == "" ? "(no collection name)" : a; this.name = a == "" ? "(no collection name)" : a } function languageModel(a) { this.id = a.id; this.name = a.name; this.colour = a.colour; this.systemName = a.systemName } function messageModel(a) { this.id = a.id; this.from = new userSimpleModel(a.from); var b = this; this.to = []; if (a.to != null && a.to != undefined) { a.to.forEach(function (a) { b.to.push(new userSimpleModel(a)) }) } this.isStarred = ko.observable(a.isStarred); this.isRead = a.isRead; this.subject = a.subject; this.date = a.date } function userSimpleModel(a) { if (a == null || a == undefined) return; this.id = a.id; this.username = a.username; this.name = a.name } function groupMembershipModel(a) { this.id = a.id; this.type = a.type; this.user = new userSimpleModel(a.user) } function groupModel(a) { this.id = a.id; this.name = a.name; this.association = a.association; this.canManage = a.canManage; this.canView = a.canView; this.canEdit = a.canEdit; this.canInfo = a.canInfo; this.pending = a.pending == "" ? "" : " (" + a.pending + " requests)" } function itemModel(a) { this.id = a.id; this.language = a.language; this.languageColour = a.languageColour; this.title = a.title; this.collectionName = ko.observable(a.collectionName); this.collectionNo = a.collectionNo; this.lastSeen = a.lastSeen; this.itemType = a.itemType; this.isShared = ko.observable(a.isShared); this.sharedGroups = ko.observable(a.sharedGroups); this.isParallel = a.isParallel; this.hasAudio = a.hasAudio } function groupItemModel(a) { this.id = a.id; this.title = a.title; this.collectionName = a.collectionName; this.collectionNo = a.collectionNo; this.hasAudio = a.hasAudio; this.isParallelText = a.isParallel; this.isText = a.isText; this.language = a.language } function uiHelper(a) { var b = this; b.settings = a; b.settings.autocomplete = a.autocomplete || []; b.settings.tags = a.tags || []; b.split = function (a) { return a.split(/ \s*/) }; b.extractLast = function (a) { return b.split(a).pop() }; $.each(b.settings.autocomplete, function (a, c) { $(c.name).autocomplete({ source: b.settings.urls.ajaxUrl + "/" + c.endpoint, minLength: c.length || 3, select: function (a, b) { if (c.vm != null) { if (c.type == "collection") { c.vm.newCollectionName($(this).val(b.item.value).val()) } else if (c.type == "groupshare") { c.vm.groupName($(this).val(b.item.value).val()) } else if (c.type == "groupunshare") { c.vm.ungroupName($(this).val(b.item.value).val()) } } } }) }); $.each(b.settings.tags, function (a, c) { $(c.name).bind("keydown", function (a) { if (a.keyCode === $.ui.keyCode.TAB && $(this).data("autocomplete").menu.active) { a.preventDefault() } }).autocomplete({ source: function (a, d) { $.post(b.settings.urls.ajaxUrl + "/" + c.endpoint, { term: b.extractLast(a.term) }, d) }, search: function () { var a = b.extractLast(this.value); if (a.length < (c.length || 2)) { return false } }, focus: function () { return false }, select: function (a, d) { var e = b.split(this.value); e.pop(); e.push(d.item.value); e.push(""); this.value = e.join(" "); if (c.vm != null) { if (c.type == "tag") { c.vm.tagsToAdd(this.value) } else if (c.type == "untag") { c.vm.tagsToRemove(this.value) } } return false } }) }); $("#ParallelIsRtl").click(function () { $("#ParallelText").attr("dir", $(this).is(":checked") ? "rtl" : "ltr") }); $("#addPart").click(function () { $.ajax({ url: b.settings.urls.textUrl + "/addtextpart", cache: false, success: function (a) { $("#parts").append(a); $("form").removeData("validator"); $.validator.unobtrusive.parse($("form")) } }); return false }); $(".deletePart").live("click", function () { $("form").removeData("validator"); $(this).parents("div.part:first").remove(); $.validator.unobtrusive.parse($("form")); return false }) } function messageCount(a) { $.post(a, function (a) { if (a == "") { $("#msgCount").hide() } else { $("#msgCount").show().html(a) } }) } $.ajaxSetup({ scriptCharset: "utf-8", contentType: "application/x-www-form-urlencoded; charset=UTF-8" }); $.ajaxSettings.traditional = true; $.ajaxSetup({ type: "post" })